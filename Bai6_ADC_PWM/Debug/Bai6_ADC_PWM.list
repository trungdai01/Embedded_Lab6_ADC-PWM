
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009954  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000308c  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb70  0800cb70  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb70  0800cb70  0001cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb78  0800cb78  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb78  0800cb78  0001cb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb7c  0800cb7c  0001cb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800cb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000003ac  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000042c  2000042c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bac9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004480  00000000  00000000  0003bb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00040000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cc6  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203b0  00000000  00000000  00069926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e054a  00000000  00000000  00089cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016a220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  0016a270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009acc 	.word	0x08009acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009acc 	.word	0x08009acc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dc4:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <MX_ADC1_Init+0x10c>)
 8000dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000df0:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <MX_ADC1_Init+0x110>)
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0e:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e10:	f002 faf2 	bl	80033f8 <HAL_ADC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f001 fd39 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e30:	f002 fc54 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e3a:	f001 fd29 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e3e:	2309      	movs	r3, #9
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e4c:	f002 fc46 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e56:	f001 fd1b 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e68:	f002 fc38 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e72:	f001 fd0d 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e76:	230b      	movs	r3, #11
 8000e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000e84:	f002 fc2a 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e8e:	f001 fcff 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e92:	230c      	movs	r3, #12
 8000e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e96:	2305      	movs	r3, #5
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_ADC1_Init+0x108>)
 8000ea0:	f002 fc1c 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000eaa:	f001 fcf1 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000009c 	.word	0x2000009c
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <HAL_ADC_MspInit+0x110>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d171      	bne.n	8000fca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4823      	ldr	r0, [pc, #140]	; (8000fdc <HAL_ADC_MspInit+0x118>)
 8000f4e:	f003 fb79 	bl	8004644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f52:	2303      	movs	r3, #3
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x11c>)
 8000f66:	f003 fb6d 	bl	8004644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_ADC_MspInit+0x124>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fb0:	f002 ff46 	bl	8003e40 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fba:	f001 fc69 	bl	8002890 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	200000e4 	.word	0x200000e4
 8000fe8:	40026410 	.word	0x40026410

08000fec <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <button_init+0x14>)
 8000ff6:	f003 fcc1 	bl	800497c <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020c00 	.word	0x40020c00

08001004 <button_Scan>:

void button_Scan(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2108      	movs	r1, #8
 800100e:	482f      	ldr	r0, [pc, #188]	; (80010cc <button_Scan+0xc8>)
 8001010:	f003 fcb4 	bl	800497c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	2108      	movs	r1, #8
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <button_Scan+0xc8>)
 800101a:	f003 fcaf 	bl	800497c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800101e:	230a      	movs	r3, #10
 8001020:	2202      	movs	r2, #2
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <button_Scan+0xcc>)
 8001024:	482b      	ldr	r0, [pc, #172]	; (80010d4 <button_Scan+0xd0>)
 8001026:	f005 fafa 	bl	800661e <HAL_SPI_Receive>
	  int button_index = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	e03f      	b.n	80010ba <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db06      	blt.n	800104e <button_Scan+0x4a>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b03      	cmp	r3, #3
 8001044:	dc03      	bgt.n	800104e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e018      	b.n	8001080 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b03      	cmp	r3, #3
 8001052:	dd07      	ble.n	8001064 <button_Scan+0x60>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b07      	cmp	r3, #7
 8001058:	dc04      	bgt.n	8001064 <button_Scan+0x60>
			  button_index = 7 - i;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1c3 0307 	rsb	r3, r3, #7
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e00d      	b.n	8001080 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b07      	cmp	r3, #7
 8001068:	dd06      	ble.n	8001078 <button_Scan+0x74>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0b      	cmp	r3, #11
 800106e:	dc03      	bgt.n	8001078 <button_Scan+0x74>
			  button_index = i + 4;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3304      	adds	r3, #4
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e003      	b.n	8001080 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1c3 0317 	rsb	r3, r3, #23
 800107e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <button_Scan+0xcc>)
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	4013      	ands	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <button_Scan+0x96>
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2100      	movs	r1, #0
 8001094:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001098:	e009      	b.n	80010ae <button_Scan+0xaa>
		  else button_count[button_index]++;
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b299      	uxth	r1, r3
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <button_Scan+0xd4>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	085b      	lsrs	r3, r3, #1
 80010b2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3301      	adds	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	ddbc      	ble.n	800103a <button_Scan+0x36>
	  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	20000164 	.word	0x20000164
 80010d4:	20000260 	.word	0x20000260
 80010d8:	20000144 	.word	0x20000144

080010dc <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <buzzer_init+0x10>)
 80010e4:	f005 ffe0 	bl	80070a8 <HAL_TIM_PWM_Start>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000304 	.word	0x20000304

080010f0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <buzzer_SetVolume+0x28>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <buzzer_SetVolume+0x28>)
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <buzzer_SetVolume+0x2c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000166 	.word	0x20000166
 800111c:	20000304 	.word	0x20000304

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <MX_DMA_Init+0x3c>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_DMA_Init+0x3c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2038      	movs	r0, #56	; 0x38
 8001148:	f002 fe43 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800114c:	2038      	movs	r0, #56	; 0x38
 800114e:	f002 fe5c 	bl	8003e0a <HAL_NVIC_EnableIRQ>

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <ds3231_Write>:
	ds3231_buffer[5] = DEC2BCD(9);	// month
	ds3231_buffer[6] = DEC2BCD(23); // year
}

void ds3231_Write(uint8_t address, uint8_t value)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f85c 	bl	8003230 <DEC2BCD>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	b29a      	uxth	r2, r3
 8001180:	230a      	movs	r3, #10
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f107 030f 	add.w	r3, r7, #15
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	21d0      	movs	r1, #208	; 0xd0
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <ds3231_Write+0x40>)
 8001194:	f003 fd6a 	bl	8004c6c <HAL_I2C_Mem_Write>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001ec 	.word	0x200001ec

080011a4 <ds3231_ReadTime>:

void ds3231_ReadTime()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80011aa:	230a      	movs	r3, #10
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2307      	movs	r3, #7
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <ds3231_ReadTime+0xa4>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2200      	movs	r2, #0
 80011ba:	21d0      	movs	r1, #208	; 0xd0
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <ds3231_ReadTime+0xa8>)
 80011be:	f003 fe4f 	bl	8004e60 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <ds3231_ReadTime+0xa4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f818 	bl	80031fc <BCD2DEC>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <ds3231_ReadTime+0xac>)
 80011d2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <ds3231_ReadTime+0xa4>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f80f 	bl	80031fc <BCD2DEC>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <ds3231_ReadTime+0xb0>)
 80011e4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <ds3231_ReadTime+0xa4>)
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f806 	bl	80031fc <BCD2DEC>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <ds3231_ReadTime+0xb4>)
 80011f6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <ds3231_ReadTime+0xa4>)
 80011fa:	78db      	ldrb	r3, [r3, #3]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fffd 	bl	80031fc <BCD2DEC>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <ds3231_ReadTime+0xb8>)
 8001208:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <ds3231_ReadTime+0xa4>)
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fff4 	bl	80031fc <BCD2DEC>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <ds3231_ReadTime+0xbc>)
 800121a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <ds3231_ReadTime+0xa4>)
 800121e:	795b      	ldrb	r3, [r3, #5]
 8001220:	4618      	mov	r0, r3
 8001222:	f001 ffeb 	bl	80031fc <BCD2DEC>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <ds3231_ReadTime+0xc0>)
 800122c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <ds3231_ReadTime+0xa4>)
 8001230:	799b      	ldrb	r3, [r3, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f001 ffe2 	bl	80031fc <BCD2DEC>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <ds3231_ReadTime+0xc4>)
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000168 	.word	0x20000168
 800124c:	200001ec 	.word	0x200001ec
 8001250:	20000171 	.word	0x20000171
 8001254:	20000170 	.word	0x20000170
 8001258:	2000016f 	.word	0x2000016f
 800125c:	20000173 	.word	0x20000173
 8001260:	20000172 	.word	0x20000172
 8001264:	20000174 	.word	0x20000174
 8001268:	20000175 	.word	0x20000175

0800126c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_FSMC_Init+0xec>)
 800129a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800129e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <MX_FSMC_Init+0xec>)
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <MX_FSMC_Init+0xf0>)
 80012a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_FSMC_Init+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_FSMC_Init+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_FSMC_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_FSMC_Init+0xec>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_FSMC_Init+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_FSMC_Init+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_FSMC_Init+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_FSMC_Init+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_FSMC_Init+0xec>)
 80012d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_FSMC_Init+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_FSMC_Init+0xec>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_FSMC_Init+0xec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_FSMC_Init+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_FSMC_Init+0xec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012fe:	230f      	movs	r3, #15
 8001300:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001302:	230f      	movs	r3, #15
 8001304:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001306:	233c      	movs	r3, #60	; 0x3c
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001312:	2311      	movs	r3, #17
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800131a:	2308      	movs	r3, #8
 800131c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800131e:	230f      	movs	r3, #15
 8001320:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001322:	2309      	movs	r3, #9
 8001324:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800132a:	2310      	movs	r3, #16
 800132c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800132e:	2311      	movs	r3, #17
 8001330:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001336:	463a      	mov	r2, r7
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_FSMC_Init+0xec>)
 8001340:	f005 fd50 	bl	8006de4 <HAL_SRAM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800134a:	f001 faa1 	bl	8002890 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000178 	.word	0x20000178
 800135c:	a0000104 	.word	0xa0000104

08001360 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_FSMC_MspInit+0x88>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d131      	bne.n	80013e0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_FSMC_MspInit+0x88>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_FSMC_MspInit+0x8c>)
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_FSMC_MspInit+0x8c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6393      	str	r3, [r2, #56]	; 0x38
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_FSMC_MspInit+0x8c>)
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800139e:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b0:	230c      	movs	r3, #12
 80013b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <HAL_FSMC_MspInit+0x90>)
 80013ba:	f003 f943 	bl	8004644 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013be:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013d0:	230c      	movs	r3, #12
 80013d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <HAL_FSMC_MspInit+0x94>)
 80013da:	f003 f933 	bl	8004644 <HAL_GPIO_Init>
 80013de:	e000      	b.n	80013e2 <HAL_FSMC_MspInit+0x82>
    return;
 80013e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200001c8 	.word	0x200001c8
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001400:	f7ff ffae 	bl	8001360 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <initFunc>:
uint8_t count_buzzer = 0;
uint8_t status = 0;
uint8_t status_buzzer = 0;

void initFunc()
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
    get_Voltage = 0;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <initFunc+0x5c>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    get_Temperature = 0;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <initFunc+0x60>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    get_Light = 0;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <initFunc+0x64>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    get_Current = 0;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <initFunc+0x68>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
    get_Power = 0;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <initFunc+0x6c>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    get_Humid = 0;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <initFunc+0x70>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    get_Potentiometer = 0;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <initFunc+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
    count_adc = 0;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <initFunc+0x78>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
    count_buzzer = 0;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <initFunc+0x7c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    status = INIT;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <initFunc+0x80>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    status_buzzer = OFF;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <initFunc+0x84>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	200001cc 	.word	0x200001cc
 800146c:	200001d0 	.word	0x200001d0
 8001470:	200001d4 	.word	0x200001d4
 8001474:	200001d8 	.word	0x200001d8
 8001478:	200001dc 	.word	0x200001dc
 800147c:	200001e0 	.word	0x200001e0
 8001480:	200001e4 	.word	0x200001e4
 8001484:	200001e6 	.word	0x200001e6
 8001488:	200001e7 	.word	0x200001e7
 800148c:	200001e8 	.word	0x200001e8
 8001490:	200001e9 	.word	0x200001e9

08001494 <display_Adc>:

void display_Adc()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af04      	add	r7, sp, #16
    lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 800149a:	2300      	movs	r3, #0
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2310      	movs	r3, #16
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <display_Adc+0x1d4>)
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	200a      	movs	r0, #10
 80014b0:	f001 f802 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 100, get_Voltage, 4, RED, BLACK, 16);
 80014b4:	4b6d      	ldr	r3, [pc, #436]	; (800166c <display_Adc+0x1d8>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	2310      	movs	r3, #16
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2300      	movs	r3, #0
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014c6:	2204      	movs	r2, #4
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	2082      	movs	r0, #130	; 0x82
 80014d0:	f000 fde6 	bl	80020a0 <lcd_ShowFloatNum>
    lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 80014d4:	2300      	movs	r3, #0
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2310      	movs	r3, #16
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e4:	4a62      	ldr	r2, [pc, #392]	; (8001670 <display_Adc+0x1dc>)
 80014e6:	2178      	movs	r1, #120	; 0x78
 80014e8:	200a      	movs	r0, #10
 80014ea:	f000 ffe5 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 120, get_Current, 5, RED, BLACK, 16);
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <display_Adc+0x1e0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	2310      	movs	r3, #16
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	2300      	movs	r3, #0
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001500:	2205      	movs	r2, #5
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	2178      	movs	r1, #120	; 0x78
 8001508:	2082      	movs	r0, #130	; 0x82
 800150a:	f000 fdc9 	bl	80020a0 <lcd_ShowFloatNum>
    lcd_ShowStr(10, 140, "Power:", RED, BLACK, 16, 0);
 800150e:	2300      	movs	r3, #0
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2310      	movs	r3, #16
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800151e:	4a56      	ldr	r2, [pc, #344]	; (8001678 <display_Adc+0x1e4>)
 8001520:	218c      	movs	r1, #140	; 0x8c
 8001522:	200a      	movs	r0, #10
 8001524:	f000 ffc8 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 140, get_Power, 5, RED, BLACK, 16);
 8001528:	4b54      	ldr	r3, [pc, #336]	; (800167c <display_Adc+0x1e8>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	2310      	movs	r3, #16
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800153a:	2205      	movs	r2, #5
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	218c      	movs	r1, #140	; 0x8c
 8001542:	2082      	movs	r0, #130	; 0x82
 8001544:	f000 fdac 	bl	80020a0 <lcd_ShowFloatNum>
    lcd_ShowStr(10, 160, "Light:", RED, BLACK, 16, 0);
 8001548:	2300      	movs	r3, #0
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2310      	movs	r3, #16
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001558:	4a49      	ldr	r2, [pc, #292]	; (8001680 <display_Adc+0x1ec>)
 800155a:	21a0      	movs	r1, #160	; 0xa0
 800155c:	200a      	movs	r0, #10
 800155e:	f000 ffab 	bl	80024b8 <lcd_ShowStr>
    if (get_Light > 3500)
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <display_Adc+0x1f0>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001688 <display_Adc+0x1f4>
 800156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	dd0d      	ble.n	8001592 <display_Adc+0xfe>
    {
        lcd_ShowStr(140, 160, "STRONG", RED, BLACK, 16, 0);
 8001576:	2300      	movs	r3, #0
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	2310      	movs	r3, #16
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001586:	4a41      	ldr	r2, [pc, #260]	; (800168c <display_Adc+0x1f8>)
 8001588:	21a0      	movs	r1, #160	; 0xa0
 800158a:	208c      	movs	r0, #140	; 0x8c
 800158c:	f000 ff94 	bl	80024b8 <lcd_ShowStr>
 8001590:	e00c      	b.n	80015ac <display_Adc+0x118>
    }
    else
        lcd_ShowStr(140, 160, "WEAK", RED, BLACK, 16, 0);
 8001592:	2300      	movs	r3, #0
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2310      	movs	r3, #16
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <display_Adc+0x1fc>)
 80015a4:	21a0      	movs	r1, #160	; 0xa0
 80015a6:	208c      	movs	r0, #140	; 0x8c
 80015a8:	f000 ff86 	bl	80024b8 <lcd_ShowStr>
    // lcd_ShowIntNum(130, 160, get_Light, 4, RED, BLACK, 16);
    lcd_ShowStr(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 80015ac:	2300      	movs	r3, #0
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2310      	movs	r3, #16
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015bc:	4a35      	ldr	r2, [pc, #212]	; (8001694 <display_Adc+0x200>)
 80015be:	21b4      	movs	r1, #180	; 0xb4
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 ff79 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 180, get_Potentiometer, 5, RED, BLACK, 16);
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <display_Adc+0x204>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	2310      	movs	r3, #16
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015de:	2205      	movs	r2, #5
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	21b4      	movs	r1, #180	; 0xb4
 80015e6:	2082      	movs	r0, #130	; 0x82
 80015e8:	f000 fd5a 	bl	80020a0 <lcd_ShowFloatNum>
    lcd_ShowStr(10, 200, "Humidity:", RED, BLACK, 16, 0);
 80015ec:	2300      	movs	r3, #0
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2310      	movs	r3, #16
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <display_Adc+0x208>)
 80015fe:	21c8      	movs	r1, #200	; 0xc8
 8001600:	200a      	movs	r0, #10
 8001602:	f000 ff59 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 200, get_Humid, 5, RED, BLACK, 16);
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <display_Adc+0x20c>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	2310      	movs	r3, #16
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001618:	2205      	movs	r2, #5
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	21c8      	movs	r1, #200	; 0xc8
 8001620:	2082      	movs	r0, #130	; 0x82
 8001622:	f000 fd3d 	bl	80020a0 <lcd_ShowFloatNum>
    lcd_ShowStr(10, 220, "Temperature:", RED, BLACK, 16, 0);
 8001626:	2300      	movs	r3, #0
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2310      	movs	r3, #16
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <display_Adc+0x210>)
 8001638:	21dc      	movs	r1, #220	; 0xdc
 800163a:	200a      	movs	r0, #10
 800163c:	f000 ff3c 	bl	80024b8 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 220, get_Temperature, 4, RED, BLACK, 16);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <display_Adc+0x214>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	2310      	movs	r3, #16
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001652:	2204      	movs	r2, #4
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	21dc      	movs	r1, #220	; 0xdc
 800165a:	2082      	movs	r0, #130	; 0x82
 800165c:	f000 fd20 	bl	80020a0 <lcd_ShowFloatNum>
    // lcd_ShowIntNum(10, 240, ds3231_sec, RED, BLACK, 16, 0);
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08009ae4 	.word	0x08009ae4
 800166c:	200001cc 	.word	0x200001cc
 8001670:	08009af0 	.word	0x08009af0
 8001674:	200001d8 	.word	0x200001d8
 8001678:	08009afc 	.word	0x08009afc
 800167c:	200001dc 	.word	0x200001dc
 8001680:	08009b04 	.word	0x08009b04
 8001684:	200001d4 	.word	0x200001d4
 8001688:	455ac000 	.word	0x455ac000
 800168c:	08009b0c 	.word	0x08009b0c
 8001690:	08009b14 	.word	0x08009b14
 8001694:	08009b1c 	.word	0x08009b1c
 8001698:	200001e4 	.word	0x200001e4
 800169c:	08009b2c 	.word	0x08009b2c
 80016a0:	200001e0 	.word	0x200001e0
 80016a4:	08009b38 	.word	0x08009b38
 80016a8:	200001d0 	.word	0x200001d0
 80016ac:	00000000 	.word	0x00000000

080016b0 <get_Adc>:

void get_Adc()
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    count_adc = (count_adc + 1) % 100;
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <get_Adc+0x198>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a64      	ldr	r2, [pc, #400]	; (800184c <get_Adc+0x19c>)
 80016bc:	fb82 1203 	smull	r1, r2, r2, r3
 80016c0:	1151      	asrs	r1, r2, #5
 80016c2:	17da      	asrs	r2, r3, #31
 80016c4:	1a8a      	subs	r2, r1, r2
 80016c6:	2164      	movs	r1, #100	; 0x64
 80016c8:	fb01 f202 	mul.w	r2, r1, r2
 80016cc:	1a9a      	subs	r2, r3, r2
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <get_Adc+0x198>)
 80016d2:	701a      	strb	r2, [r3, #0]
    if (count_adc == 0)
 80016d4:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <get_Adc+0x198>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 80ac 	bne.w	8001836 <get_Adc+0x186>
    {
        sensor_Read();
 80016de:	f001 f8eb 	bl	80028b8 <sensor_Read>
        get_Voltage = sensor_GetVoltage();
 80016e2:	f001 f911 	bl	8002908 <sensor_GetVoltage>
 80016e6:	eef0 7a40 	vmov.f32	s15, s0
 80016ea:	4b59      	ldr	r3, [pc, #356]	; (8001850 <get_Adc+0x1a0>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
        get_Current = sensor_GetCurrent();
 80016f0:	f001 f946 	bl	8002980 <sensor_GetCurrent>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <get_Adc+0x1a4>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]
        get_Light = sensor_GetLight();
 80016fe:	f001 f8e9 	bl	80028d4 <sensor_GetLight>
 8001702:	4603      	mov	r3, r0
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170c:	4b52      	ldr	r3, [pc, #328]	; (8001858 <get_Adc+0x1a8>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
        get_Potentiometer = sensor_GetPotentiometer();
 8001712:	f001 f8eb 	bl	80028ec <sensor_GetPotentiometer>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <get_Adc+0x1ac>)
 800171c:	801a      	strh	r2, [r3, #0]
        get_Temperature = sensor_GetTemperature();
 800171e:	f001 f98b 	bl	8002a38 <sensor_GetTemperature>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
 8001726:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <get_Adc+0x1b0>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
        get_Power = get_Voltage * (get_Current / 1000.0);
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <get_Adc+0x1a0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff01 	bl	8000538 <__aeabi_f2d>
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <get_Adc+0x1a4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fefa 	bl	8000538 <__aeabi_f2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b46      	ldr	r3, [pc, #280]	; (8001864 <get_Adc+0x1b4>)
 800174a:	f7ff f877 	bl	800083c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff47 	bl	80005e8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f953 	bl	8000a0c <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <get_Adc+0x1b8>)
 800176a:	6013      	str	r3, [r2, #0]
        get_Humid = ((float)get_Potentiometer / 4095.0) * 100;
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <get_Adc+0x1ac>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7fe fedc 	bl	8000538 <__aeabi_f2d>
 8001780:	a32f      	add	r3, pc, #188	; (adr r3, 8001840 <get_Adc+0x190>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f859 	bl	800083c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b35      	ldr	r3, [pc, #212]	; (800186c <get_Adc+0x1bc>)
 8001798:	f7fe ff26 	bl	80005e8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f932 	bl	8000a0c <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <get_Adc+0x1c0>)
 80017ac:	6013      	str	r3, [r2, #0]
        uart_Rs232SendString("Power: ");
 80017ae:	4831      	ldr	r0, [pc, #196]	; (8001874 <get_Adc+0x1c4>)
 80017b0:	f001 fc04 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendNum(get_Power);
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <get_Adc+0x1b8>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f001 fc15 	bl	8002ff0 <uart_Rs232SendNum>
        uart_Rs232SendString("\n");
 80017c6:	482c      	ldr	r0, [pc, #176]	; (8001878 <get_Adc+0x1c8>)
 80017c8:	f001 fbf8 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendString("Luminosity: ");
 80017cc:	482b      	ldr	r0, [pc, #172]	; (800187c <get_Adc+0x1cc>)
 80017ce:	f001 fbf5 	bl	8002fbc <uart_Rs232SendString>
        if (get_Light > 3500)
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <get_Adc+0x1a8>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001880 <get_Adc+0x1d0>
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd03      	ble.n	80017ee <get_Adc+0x13e>
        {
            uart_Rs232SendString("STRONG");
 80017e6:	4827      	ldr	r0, [pc, #156]	; (8001884 <get_Adc+0x1d4>)
 80017e8:	f001 fbe8 	bl	8002fbc <uart_Rs232SendString>
 80017ec:	e002      	b.n	80017f4 <get_Adc+0x144>
        }
        else
            uart_Rs232SendString("WEAK");
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <get_Adc+0x1d8>)
 80017f0:	f001 fbe4 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendString("\n");
 80017f4:	4820      	ldr	r0, [pc, #128]	; (8001878 <get_Adc+0x1c8>)
 80017f6:	f001 fbe1 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendString("Temperature: ");
 80017fa:	4824      	ldr	r0, [pc, #144]	; (800188c <get_Adc+0x1dc>)
 80017fc:	f001 fbde 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendNum(get_Temperature);
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <get_Adc+0x1b0>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f001 fbef 	bl	8002ff0 <uart_Rs232SendNum>
        uart_Rs232SendString("\n");
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <get_Adc+0x1c8>)
 8001814:	f001 fbd2 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendString("Humid: ");
 8001818:	481d      	ldr	r0, [pc, #116]	; (8001890 <get_Adc+0x1e0>)
 800181a:	f001 fbcf 	bl	8002fbc <uart_Rs232SendString>
        uart_Rs232SendNum(get_Humid);
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <get_Adc+0x1c0>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001828:	ee17 0a90 	vmov	r0, s15
 800182c:	f001 fbe0 	bl	8002ff0 <uart_Rs232SendNum>
        uart_Rs232SendString("\n");
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <get_Adc+0x1c8>)
 8001832:	f001 fbc3 	bl	8002fbc <uart_Rs232SendString>
    }
    display_Adc();
 8001836:	f7ff fe2d 	bl	8001494 <display_Adc>
}
 800183a:	bf00      	nop
 800183c:	bdb0      	pop	{r4, r5, r7, pc}
 800183e:	bf00      	nop
 8001840:	00000000 	.word	0x00000000
 8001844:	40affe00 	.word	0x40affe00
 8001848:	200001e6 	.word	0x200001e6
 800184c:	51eb851f 	.word	0x51eb851f
 8001850:	200001cc 	.word	0x200001cc
 8001854:	200001d8 	.word	0x200001d8
 8001858:	200001d4 	.word	0x200001d4
 800185c:	200001e4 	.word	0x200001e4
 8001860:	200001d0 	.word	0x200001d0
 8001864:	408f4000 	.word	0x408f4000
 8001868:	200001dc 	.word	0x200001dc
 800186c:	40590000 	.word	0x40590000
 8001870:	200001e0 	.word	0x200001e0
 8001874:	08009b48 	.word	0x08009b48
 8001878:	08009b50 	.word	0x08009b50
 800187c:	08009b54 	.word	0x08009b54
 8001880:	455ac000 	.word	0x455ac000
 8001884:	08009b0c 	.word	0x08009b0c
 8001888:	08009b14 	.word	0x08009b14
 800188c:	08009b64 	.word	0x08009b64
 8001890:	08009b74 	.word	0x08009b74

08001894 <fsm_Buzzer>:

void fsm_Buzzer()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    switch (status)
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <fsm_Buzzer+0xc4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d019      	beq.n	80018d4 <fsm_Buzzer+0x40>
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	dc55      	bgt.n	8001950 <fsm_Buzzer+0xbc>
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <fsm_Buzzer+0x1a>
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d004      	beq.n	80018b6 <fsm_Buzzer+0x22>
            count_buzzer = 0;
            buzzer_SetVolume(0);
        }
        break;
    default:
        break;
 80018ac:	e050      	b.n	8001950 <fsm_Buzzer+0xbc>
        status = NORMAL;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <fsm_Buzzer+0xc4>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
        break;
 80018b4:	e04d      	b.n	8001952 <fsm_Buzzer+0xbe>
        if (get_Humid >= 70.0)
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <fsm_Buzzer+0xc8>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001960 <fsm_Buzzer+0xcc>
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	da00      	bge.n	80018cc <fsm_Buzzer+0x38>
        break;
 80018ca:	e042      	b.n	8001952 <fsm_Buzzer+0xbe>
            status = WARNING;
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <fsm_Buzzer+0xc4>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
        break;
 80018d2:	e03e      	b.n	8001952 <fsm_Buzzer+0xbe>
        count_buzzer = (count_buzzer + 1) % 20;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <fsm_Buzzer+0xd0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <fsm_Buzzer+0xd4>)
 80018dc:	fb83 1302 	smull	r1, r3, r3, r2
 80018e0:	10d9      	asrs	r1, r3, #3
 80018e2:	17d3      	asrs	r3, r2, #31
 80018e4:	1ac9      	subs	r1, r1, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	1ad1      	subs	r1, r2, r3
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <fsm_Buzzer+0xd0>)
 80018f4:	701a      	strb	r2, [r3, #0]
        if (count_buzzer == 0)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <fsm_Buzzer+0xd0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d113      	bne.n	8001926 <fsm_Buzzer+0x92>
            if (status_buzzer == ON)
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <fsm_Buzzer+0xd8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <fsm_Buzzer+0x80>
                status_buzzer = OFF;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <fsm_Buzzer+0xd8>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
                buzzer_SetVolume(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fbef 	bl	80010f0 <buzzer_SetVolume>
 8001912:	e008      	b.n	8001926 <fsm_Buzzer+0x92>
                status_buzzer = ON;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <fsm_Buzzer+0xd8>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
                buzzer_SetVolume(75);
 800191a:	204b      	movs	r0, #75	; 0x4b
 800191c:	f7ff fbe8 	bl	80010f0 <buzzer_SetVolume>
                uart_Rs232SendString("!WARNING#");
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <fsm_Buzzer+0xdc>)
 8001922:	f001 fb4b 	bl	8002fbc <uart_Rs232SendString>
        if (get_Humid < 70)
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <fsm_Buzzer+0xc8>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001960 <fsm_Buzzer+0xcc>
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d400      	bmi.n	800193c <fsm_Buzzer+0xa8>
        break;
 800193a:	e00a      	b.n	8001952 <fsm_Buzzer+0xbe>
            status = NORMAL;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <fsm_Buzzer+0xc4>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
            count_buzzer = 0;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <fsm_Buzzer+0xd0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
            buzzer_SetVolume(0);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fbd1 	bl	80010f0 <buzzer_SetVolume>
        break;
 800194e:	e000      	b.n	8001952 <fsm_Buzzer+0xbe>
        break;
 8001950:	bf00      	nop
    }
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001e8 	.word	0x200001e8
 800195c:	200001e0 	.word	0x200001e0
 8001960:	428c0000 	.word	0x428c0000
 8001964:	200001e7 	.word	0x200001e7
 8001968:	66666667 	.word	0x66666667
 800196c:	200001e9 	.word	0x200001e9
 8001970:	08009b7c 	.word	0x08009b7c

08001974 <updateTime>:

void updateTime()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    ds3231_Write(ADDRESS_YEAR, 23);
 8001978:	2117      	movs	r1, #23
 800197a:	2006      	movs	r0, #6
 800197c:	f7ff fbf0 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_MONTH, 10);
 8001980:	210a      	movs	r1, #10
 8001982:	2005      	movs	r0, #5
 8001984:	f7ff fbec 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_DATE, 20);
 8001988:	2114      	movs	r1, #20
 800198a:	2004      	movs	r0, #4
 800198c:	f7ff fbe8 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_DAY, 6);
 8001990:	2106      	movs	r1, #6
 8001992:	2003      	movs	r0, #3
 8001994:	f7ff fbe4 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_HOUR, 20);
 8001998:	2114      	movs	r1, #20
 800199a:	2002      	movs	r0, #2
 800199c:	f7ff fbe0 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_MIN, 0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff fbdc 	bl	8001160 <ds3231_Write>
    ds3231_Write(ADDRESS_SEC, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fbd8 	bl	8001160 <ds3231_Write>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <time_and_comms>:

void time_and_comms()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    ds3231_ReadTime();
 80019b8:	f7ff fbf4 	bl	80011a4 <ds3231_ReadTime>
    led7_SetDigit(ds3231_min / 10, 0, 0);
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <time_and_comms+0x80>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <time_and_comms+0x84>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fe62 	bl	8002698 <led7_SetDigit>
    led7_SetDigit(ds3231_min % 10, 1, 0);
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <time_and_comms+0x80>)
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <time_and_comms+0x84>)
 80019da:	fba3 1302 	umull	r1, r3, r3, r2
 80019de:	08d9      	lsrs	r1, r3, #3
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fe51 	bl	8002698 <led7_SetDigit>
    led7_SetDigit(ds3231_sec / 10, 2, 0);
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <time_and_comms+0x88>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <time_and_comms+0x84>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fe45 	bl	8002698 <led7_SetDigit>
    led7_SetDigit(ds3231_sec % 10, 3, 0);
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <time_and_comms+0x88>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <time_and_comms+0x84>)
 8001a14:	fba3 1302 	umull	r1, r3, r3, r2
 8001a18:	08d9      	lsrs	r1, r3, #3
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2200      	movs	r2, #0
 8001a28:	2103      	movs	r1, #3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fe34 	bl	8002698 <led7_SetDigit>
    // led7_Scan();
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000170 	.word	0x20000170
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	20000171 	.word	0x20000171

08001a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a75      	ldr	r2, [pc, #468]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a67      	ldr	r2, [pc, #412]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a60      	ldr	r2, [pc, #384]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a59      	ldr	r2, [pc, #356]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_GPIO_Init+0x1f4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2170      	movs	r1, #112	; 0x70
 8001b3a:	483f      	ldr	r0, [pc, #252]	; (8001c38 <MX_GPIO_Init+0x1f8>)
 8001b3c:	f002 ff1e 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b46:	483d      	ldr	r0, [pc, #244]	; (8001c3c <MX_GPIO_Init+0x1fc>)
 8001b48:	f002 ff18 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	483b      	ldr	r0, [pc, #236]	; (8001c40 <MX_GPIO_Init+0x200>)
 8001b52:	f002 ff13 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5c:	4839      	ldr	r0, [pc, #228]	; (8001c44 <MX_GPIO_Init+0x204>)
 8001b5e:	f002 ff0d 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2108      	movs	r1, #8
 8001b66:	4838      	ldr	r0, [pc, #224]	; (8001c48 <MX_GPIO_Init+0x208>)
 8001b68:	f002 ff08 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001b6c:	2370      	movs	r3, #112	; 0x70
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	482d      	ldr	r0, [pc, #180]	; (8001c38 <MX_GPIO_Init+0x1f8>)
 8001b84:	f002 fd5e 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4826      	ldr	r0, [pc, #152]	; (8001c3c <MX_GPIO_Init+0x1fc>)
 8001ba2:	f002 fd4f 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4822      	ldr	r0, [pc, #136]	; (8001c44 <MX_GPIO_Init+0x204>)
 8001bba:	f002 fd43 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001bbe:	2330      	movs	r3, #48	; 0x30
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481a      	ldr	r0, [pc, #104]	; (8001c3c <MX_GPIO_Init+0x1fc>)
 8001bd2:	f002 fd37 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4814      	ldr	r0, [pc, #80]	; (8001c40 <MX_GPIO_Init+0x200>)
 8001bee:	f002 fd29 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_GPIO_Init+0x204>)
 8001c0c:	f002 fd1a 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001c10:	2308      	movs	r3, #8
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MX_GPIO_Init+0x208>)
 8001c28:	f002 fd0c 	bl	8004644 <HAL_GPIO_Init>

}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020c00 	.word	0x40020c00

08001c4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_I2C1_Init+0x58>)
 8001c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_I2C1_Init+0x50>)
 8001c8a:	f002 feab 	bl	80049e4 <HAL_I2C_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c94:	f000 fdfc 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200001ec 	.word	0x200001ec
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	000186a0 	.word	0x000186a0

08001ca8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_I2C_MspInit+0x84>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce6:	23c0      	movs	r3, #192	; 0xc0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cea:	2312      	movs	r3, #18
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <HAL_I2C_MspInit+0x8c>)
 8001d02:	f002 fc9f 	bl	8004644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_I2C_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40005400 	.word	0x40005400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020400 	.word	0x40020400

08001d38 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <LCD_WR_REG+0x1c>)
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	8013      	strh	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	600ffffe 	.word	0x600ffffe

08001d58 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <LCD_WR_DATA+0x1c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	8053      	strh	r3, [r2, #2]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	600ffffe 	.word	0x600ffffe

08001d78 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <LCD_RD_DATA+0x20>)
 8001d80:	885b      	ldrh	r3, [r3, #2]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	b29b      	uxth	r3, r3
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	600ffffe 	.word	0x600ffffe

08001d9c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001dba:	202a      	movs	r0, #42	; 0x2a
 8001dbc:	f7ff ffbc 	bl	8001d38 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ffc6 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffc0 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ffba 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffb4 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001df0:	202b      	movs	r0, #43	; 0x2b
 8001df2:	f7ff ffa1 	bl	8001d38 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffab 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffa5 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001e0e:	883b      	ldrh	r3, [r7, #0]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff9f 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001e1a:	883b      	ldrh	r3, [r7, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff99 	bl	8001d58 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001e26:	202c      	movs	r0, #44	; 0x2c
 8001e28:	f7ff ff86 	bl	8001d38 <LCD_WR_REG>
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}

08001e34 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <lcd_Clear+0x60>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <lcd_Clear+0x60>)
 8001e48:	885b      	ldrh	r3, [r3, #2]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff ffa3 	bl	8001d9c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	e011      	b.n	8001e80 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	81bb      	strh	r3, [r7, #12]
 8001e60:	e006      	b.n	8001e70 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff77 	bl	8001d58 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	81bb      	strh	r3, [r7, #12]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <lcd_Clear+0x60>)
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	89ba      	ldrh	r2, [r7, #12]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3f3      	bcc.n	8001e62 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	81fb      	strh	r3, [r7, #14]
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <lcd_Clear+0x60>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	89fa      	ldrh	r2, [r7, #14]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3e8      	bcc.n	8001e5c <lcd_Clear+0x28>
		}
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000240 	.word	0x20000240

08001e98 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	88b9      	ldrh	r1, [r7, #4]
 8001eb0:	88f8      	ldrh	r0, [r7, #6]
 8001eb2:	f7ff ff73 	bl	8001d9c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff4d 	bl	8001d58 <LCD_WR_DATA>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	80fb      	strh	r3, [r7, #6]
 8001eda:	4603      	mov	r3, r0
 8001edc:	80bb      	strh	r3, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	fb12 f303 	smulbb	r3, r2, r3
 8001f1e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	3b20      	subs	r3, #32
 8001f24:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29c      	uxth	r4, r3
 8001f34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	88b9      	ldrh	r1, [r7, #4]
 8001f46:	88f8      	ldrh	r0, [r7, #6]
 8001f48:	4622      	mov	r2, r4
 8001f4a:	f7ff ff27 	bl	8001d9c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	827b      	strh	r3, [r7, #18]
 8001f52:	e07a      	b.n	800204a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001f54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d028      	beq.n	8001fae <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d108      	bne.n	8001f76 <lcd_ShowChar+0xae>
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	8a7b      	ldrh	r3, [r7, #18]
 8001f68:	493c      	ldr	r1, [pc, #240]	; (800205c <lcd_ShowChar+0x194>)
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	440a      	add	r2, r1
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	e01b      	b.n	8001fae <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	d10b      	bne.n	8001f96 <lcd_ShowChar+0xce>
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	8a79      	ldrh	r1, [r7, #18]
 8001f82:	4837      	ldr	r0, [pc, #220]	; (8002060 <lcd_ShowChar+0x198>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4403      	add	r3, r0
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	75fb      	strb	r3, [r7, #23]
 8001f94:	e00b      	b.n	8001fae <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001f96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d15a      	bne.n	8002054 <lcd_ShowChar+0x18c>
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	8a7b      	ldrh	r3, [r7, #18]
 8001fa2:	4930      	ldr	r1, [pc, #192]	; (8002064 <lcd_ShowChar+0x19c>)
 8001fa4:	0192      	lsls	r2, r2, #6
 8001fa6:	440a      	add	r2, r1
 8001fa8:	4413      	add	r3, r2
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75bb      	strb	r3, [r7, #22]
 8001fb2:	e044      	b.n	800203e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d120      	bne.n	8001ffe <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001fbc:	7dfa      	ldrb	r2, [r7, #23]
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	fa42 f303 	asr.w	r3, r2, r3
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <lcd_ShowChar+0x10e>
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fec2 	bl	8001d58 <LCD_WR_DATA>
 8001fd4:	e003      	b.n	8001fde <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001fd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff febd 	bl	8001d58 <LCD_WR_DATA>
				m++;
 8001fde:	7d7b      	ldrb	r3, [r7, #21]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001fe4:	7d7b      	ldrb	r3, [r7, #21]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fec:	fb01 f202 	mul.w	r2, r1, r2
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11f      	bne.n	8002038 <lcd_ShowChar+0x170>
				{
					m=0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	757b      	strb	r3, [r7, #21]
					break;
 8001ffc:	e022      	b.n	8002044 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001ffe:	7dfa      	ldrb	r2, [r7, #23]
 8002000:	7dbb      	ldrb	r3, [r7, #22]
 8002002:	fa42 f303 	asr.w	r3, r2, r3
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <lcd_ShowChar+0x152>
 800200e:	883a      	ldrh	r2, [r7, #0]
 8002010:	88b9      	ldrh	r1, [r7, #4]
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff3f 	bl	8001e98 <lcd_DrawPoint>
				x++;
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	3301      	adds	r3, #1
 800201e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002020:	88fa      	ldrh	r2, [r7, #6]
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	1ad2      	subs	r2, r2, r3
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	429a      	cmp	r2, r3
 800202a:	d105      	bne.n	8002038 <lcd_ShowChar+0x170>
				{
					x=x0;
 800202c:	8a3b      	ldrh	r3, [r7, #16]
 800202e:	80fb      	strh	r3, [r7, #6]
					y++;
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	80bb      	strh	r3, [r7, #4]
					break;
 8002036:	e005      	b.n	8002044 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002038:	7dbb      	ldrb	r3, [r7, #22]
 800203a:	3301      	adds	r3, #1
 800203c:	75bb      	strb	r3, [r7, #22]
 800203e:	7dbb      	ldrb	r3, [r7, #22]
 8002040:	2b07      	cmp	r3, #7
 8002042:	d9b7      	bls.n	8001fb4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002044:	8a7b      	ldrh	r3, [r7, #18]
 8002046:	3301      	adds	r3, #1
 8002048:	827b      	strh	r3, [r7, #18]
 800204a:	8a7a      	ldrh	r2, [r7, #18]
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	429a      	cmp	r2, r3
 8002050:	d380      	bcc.n	8001f54 <lcd_ShowChar+0x8c>
 8002052:	e000      	b.n	8002056 <lcd_ShowChar+0x18e>
		else return;
 8002054:	bf00      	nop
				}
			}
		}
	}
}
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	08009b9c 	.word	0x08009b9c
 8002060:	0800a18c 	.word	0x0800a18c
 8002064:	0800b35c 	.word	0x0800b35c

08002068 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	460a      	mov	r2, r1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	4613      	mov	r3, r2
 8002076:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002078:	2301      	movs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800207c:	e004      	b.n	8002088 <mypow+0x20>
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	71ba      	strb	r2, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f5      	bne.n	800207e <mypow+0x16>
	return result;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	4604      	mov	r4, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	4603      	mov	r3, r0
 80020b8:	81bb      	strh	r3, [r7, #12]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	4613      	mov	r3, r2
 80020c0:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80020c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80020ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ce:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80021a8 <lcd_ShowFloatNum+0x108>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020da:	ee17 3a90 	vmov	r3, s15
 80020de:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]
 80020e4:	e057      	b.n	8002196 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80020e6:	8abc      	ldrh	r4, [r7, #20]
 80020e8:	79fa      	ldrb	r2, [r7, #7]
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4619      	mov	r1, r3
 80020f6:	200a      	movs	r0, #10
 80020f8:	f7ff ffb6 	bl	8002068 <mypow>
 80020fc:	4603      	mov	r3, r0
 80020fe:	fbb4 f1f3 	udiv	r1, r4, r3
 8002102:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <lcd_ShowFloatNum+0x10c>)
 8002104:	fba3 2301 	umull	r2, r3, r3, r1
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	1aca      	subs	r2, r1, r3
 8002114:	4613      	mov	r3, r2
 8002116:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8002118:	7dfa      	ldrb	r2, [r7, #23]
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	3b02      	subs	r3, #2
 800211e:	429a      	cmp	r2, r3
 8002120:	d11d      	bne.n	800215e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	3b02      	subs	r3, #2
 8002126:	b29a      	uxth	r2, r3
 8002128:	7dbb      	ldrb	r3, [r7, #22]
 800212a:	b29b      	uxth	r3, r3
 800212c:	fb12 f303 	smulbb	r3, r2, r3
 8002130:	b29a      	uxth	r2, r3
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	4413      	add	r3, r2
 8002136:	b298      	uxth	r0, r3
 8002138:	88ba      	ldrh	r2, [r7, #4]
 800213a:	89b9      	ldrh	r1, [r7, #12]
 800213c:	2300      	movs	r3, #0
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	222e      	movs	r2, #46	; 0x2e
 800214e:	f7ff febb 	bl	8001ec8 <lcd_ShowChar>
			t++;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	3301      	adds	r3, #1
 8002156:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3301      	adds	r3, #1
 800215c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	b29a      	uxth	r2, r3
 8002162:	7dbb      	ldrb	r3, [r7, #22]
 8002164:	b29b      	uxth	r3, r3
 8002166:	fb12 f303 	smulbb	r3, r2, r3
 800216a:	b29a      	uxth	r2, r3
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	4413      	add	r3, r2
 8002170:	b298      	uxth	r0, r3
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	3330      	adds	r3, #48	; 0x30
 8002176:	b2da      	uxtb	r2, r3
 8002178:	88bc      	ldrh	r4, [r7, #4]
 800217a:	89b9      	ldrh	r1, [r7, #12]
 800217c:	2300      	movs	r3, #0
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4623      	mov	r3, r4
 800218c:	f7ff fe9c 	bl	8001ec8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	3301      	adds	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
 8002196:	7dfa      	ldrb	r2, [r7, #23]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d3a3      	bcc.n	80020e6 <lcd_ShowFloatNum+0x46>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	42c80000 	.word	0x42c80000
 80021ac:	cccccccd 	.word	0xcccccccd

080021b0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <lcd_SetDir+0x44>)
 80021cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021d0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <lcd_SetDir+0x44>)
 80021d4:	22f0      	movs	r2, #240	; 0xf0
 80021d6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80021d8:	e006      	b.n	80021e8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <lcd_SetDir+0x44>)
 80021dc:	22f0      	movs	r2, #240	; 0xf0
 80021de:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <lcd_SetDir+0x44>)
 80021e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021e6:	805a      	strh	r2, [r3, #2]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	20000240 	.word	0x20000240

080021f8 <lcd_init>:


void lcd_init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002202:	48aa      	ldr	r0, [pc, #680]	; (80024ac <lcd_init+0x2b4>)
 8002204:	f002 fbba 	bl	800497c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800220c:	f001 f8d0 	bl	80033b0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002216:	48a5      	ldr	r0, [pc, #660]	; (80024ac <lcd_init+0x2b4>)
 8002218:	f002 fbb0 	bl	800497c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800221c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002220:	f001 f8c6 	bl	80033b0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ffc3 	bl	80021b0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800222a:	20d3      	movs	r0, #211	; 0xd3
 800222c:	f7ff fd84 	bl	8001d38 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002230:	f7ff fda2 	bl	8001d78 <LCD_RD_DATA>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b9d      	ldr	r3, [pc, #628]	; (80024b0 <lcd_init+0x2b8>)
 800223a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800223c:	f7ff fd9c 	bl	8001d78 <LCD_RD_DATA>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4b9a      	ldr	r3, [pc, #616]	; (80024b0 <lcd_init+0x2b8>)
 8002246:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002248:	f7ff fd96 	bl	8001d78 <LCD_RD_DATA>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <lcd_init+0x2b8>)
 8002252:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002254:	4b96      	ldr	r3, [pc, #600]	; (80024b0 <lcd_init+0x2b8>)
 8002256:	889b      	ldrh	r3, [r3, #4]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b94      	ldr	r3, [pc, #592]	; (80024b0 <lcd_init+0x2b8>)
 800225e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002260:	f7ff fd8a 	bl	8001d78 <LCD_RD_DATA>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	4b91      	ldr	r3, [pc, #580]	; (80024b0 <lcd_init+0x2b8>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <lcd_init+0x2b8>)
 8002272:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002274:	20cf      	movs	r0, #207	; 0xcf
 8002276:	f7ff fd5f 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f7ff fd6c 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002280:	20c1      	movs	r0, #193	; 0xc1
 8002282:	f7ff fd69 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002286:	2030      	movs	r0, #48	; 0x30
 8002288:	f7ff fd66 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800228c:	20ed      	movs	r0, #237	; 0xed
 800228e:	f7ff fd53 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002292:	2064      	movs	r0, #100	; 0x64
 8002294:	f7ff fd60 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002298:	2003      	movs	r0, #3
 800229a:	f7ff fd5d 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800229e:	2012      	movs	r0, #18
 80022a0:	f7ff fd5a 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80022a4:	2081      	movs	r0, #129	; 0x81
 80022a6:	f7ff fd57 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80022aa:	20e8      	movs	r0, #232	; 0xe8
 80022ac:	f7ff fd44 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80022b0:	2085      	movs	r0, #133	; 0x85
 80022b2:	f7ff fd51 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80022b6:	2010      	movs	r0, #16
 80022b8:	f7ff fd4e 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80022bc:	207a      	movs	r0, #122	; 0x7a
 80022be:	f7ff fd4b 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80022c2:	20cb      	movs	r0, #203	; 0xcb
 80022c4:	f7ff fd38 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80022c8:	2039      	movs	r0, #57	; 0x39
 80022ca:	f7ff fd45 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	f7ff fd42 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fd3f 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80022da:	2034      	movs	r0, #52	; 0x34
 80022dc:	f7ff fd3c 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7ff fd39 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80022e6:	20f7      	movs	r0, #247	; 0xf7
 80022e8:	f7ff fd26 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80022ec:	2020      	movs	r0, #32
 80022ee:	f7ff fd33 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80022f2:	20ea      	movs	r0, #234	; 0xea
 80022f4:	f7ff fd20 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fd2d 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fd2a 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002304:	20c0      	movs	r0, #192	; 0xc0
 8002306:	f7ff fd17 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800230a:	201b      	movs	r0, #27
 800230c:	f7ff fd24 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002310:	20c1      	movs	r0, #193	; 0xc1
 8002312:	f7ff fd11 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fd1e 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800231c:	20c5      	movs	r0, #197	; 0xc5
 800231e:	f7ff fd0b 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002322:	2030      	movs	r0, #48	; 0x30
 8002324:	f7ff fd18 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002328:	2030      	movs	r0, #48	; 0x30
 800232a:	f7ff fd15 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800232e:	20c7      	movs	r0, #199	; 0xc7
 8002330:	f7ff fd02 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002334:	20b7      	movs	r0, #183	; 0xb7
 8002336:	f7ff fd0f 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800233a:	2036      	movs	r0, #54	; 0x36
 800233c:	f7ff fcfc 	bl	8001d38 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002340:	2008      	movs	r0, #8
 8002342:	f7ff fd09 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002346:	203a      	movs	r0, #58	; 0x3a
 8002348:	f7ff fcf6 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800234c:	2055      	movs	r0, #85	; 0x55
 800234e:	f7ff fd03 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002352:	20b1      	movs	r0, #177	; 0xb1
 8002354:	f7ff fcf0 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff fcfd 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800235e:	201a      	movs	r0, #26
 8002360:	f7ff fcfa 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002364:	20b6      	movs	r0, #182	; 0xb6
 8002366:	f7ff fce7 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800236a:	200a      	movs	r0, #10
 800236c:	f7ff fcf4 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002370:	20a2      	movs	r0, #162	; 0xa2
 8002372:	f7ff fcf1 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002376:	20f2      	movs	r0, #242	; 0xf2
 8002378:	f7ff fcde 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f7ff fceb 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002382:	2026      	movs	r0, #38	; 0x26
 8002384:	f7ff fcd8 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff fce5 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800238e:	20e0      	movs	r0, #224	; 0xe0
 8002390:	f7ff fcd2 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002394:	200f      	movs	r0, #15
 8002396:	f7ff fcdf 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800239a:	202a      	movs	r0, #42	; 0x2a
 800239c:	f7ff fcdc 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80023a0:	2028      	movs	r0, #40	; 0x28
 80023a2:	f7ff fcd9 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023a6:	2008      	movs	r0, #8
 80023a8:	f7ff fcd6 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80023ac:	200e      	movs	r0, #14
 80023ae:	f7ff fcd3 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023b2:	2008      	movs	r0, #8
 80023b4:	f7ff fcd0 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80023b8:	2054      	movs	r0, #84	; 0x54
 80023ba:	f7ff fccd 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80023be:	20a9      	movs	r0, #169	; 0xa9
 80023c0:	f7ff fcca 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80023c4:	2043      	movs	r0, #67	; 0x43
 80023c6:	f7ff fcc7 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80023ca:	200a      	movs	r0, #10
 80023cc:	f7ff fcc4 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80023d0:	200f      	movs	r0, #15
 80023d2:	f7ff fcc1 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fcbe 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff fcbb 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff fcb8 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff fcb5 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80023ee:	20e1      	movs	r0, #225	; 0xe1
 80023f0:	f7ff fca2 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fcaf 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80023fa:	2015      	movs	r0, #21
 80023fc:	f7ff fcac 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002400:	2017      	movs	r0, #23
 8002402:	f7ff fca9 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002406:	2007      	movs	r0, #7
 8002408:	f7ff fca6 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800240c:	2011      	movs	r0, #17
 800240e:	f7ff fca3 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002412:	2006      	movs	r0, #6
 8002414:	f7ff fca0 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002418:	202b      	movs	r0, #43	; 0x2b
 800241a:	f7ff fc9d 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800241e:	2056      	movs	r0, #86	; 0x56
 8002420:	f7ff fc9a 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002424:	203c      	movs	r0, #60	; 0x3c
 8002426:	f7ff fc97 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800242a:	2005      	movs	r0, #5
 800242c:	f7ff fc94 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002430:	2010      	movs	r0, #16
 8002432:	f7ff fc91 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002436:	200f      	movs	r0, #15
 8002438:	f7ff fc8e 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800243c:	203f      	movs	r0, #63	; 0x3f
 800243e:	f7ff fc8b 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002442:	203f      	movs	r0, #63	; 0x3f
 8002444:	f7ff fc88 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002448:	200f      	movs	r0, #15
 800244a:	f7ff fc85 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800244e:	202b      	movs	r0, #43	; 0x2b
 8002450:	f7ff fc72 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff fc7f 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff fc7c 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff fc79 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002466:	203f      	movs	r0, #63	; 0x3f
 8002468:	f7ff fc76 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800246c:	202a      	movs	r0, #42	; 0x2a
 800246e:	f7ff fc63 	bl	8001d38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff fc70 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff fc6d 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff fc6a 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002484:	20ef      	movs	r0, #239	; 0xef
 8002486:	f7ff fc67 	bl	8001d58 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800248a:	2011      	movs	r0, #17
 800248c:	f7ff fc54 	bl	8001d38 <LCD_WR_REG>
	HAL_Delay(120);
 8002490:	2078      	movs	r0, #120	; 0x78
 8002492:	f000 ff8d 	bl	80033b0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002496:	2029      	movs	r0, #41	; 0x29
 8002498:	f7ff fc4e 	bl	8001d38 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a2:	4804      	ldr	r0, [pc, #16]	; (80024b4 <lcd_init+0x2bc>)
 80024a4:	f002 fa6a 	bl	800497c <HAL_GPIO_WritePin>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40020800 	.word	0x40020800
 80024b0:	20000240 	.word	0x20000240
 80024b4:	40020000 	.word	0x40020000

080024b8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af04      	add	r7, sp, #16
 80024be:	60ba      	str	r2, [r7, #8]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	81fb      	strh	r3, [r7, #14]
 80024c6:	460b      	mov	r3, r1
 80024c8:	81bb      	strh	r3, [r7, #12]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80024d6:	e048      	b.n	800256a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d145      	bne.n	800256a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80024de:	89fa      	ldrh	r2, [r7, #14]
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <lcd_ShowStr+0xc4>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	1acb      	subs	r3, r1, r3
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dc3f      	bgt.n	8002574 <lcd_ShowStr+0xbc>
 80024f4:	89ba      	ldrh	r2, [r7, #12]
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <lcd_ShowStr+0xc4>)
 80024f8:	885b      	ldrh	r3, [r3, #2]
 80024fa:	4619      	mov	r1, r3
 80024fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002500:	1acb      	subs	r3, r1, r3
 8002502:	429a      	cmp	r2, r3
 8002504:	dc36      	bgt.n	8002574 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b80      	cmp	r3, #128	; 0x80
 800250c:	d902      	bls.n	8002514 <lcd_ShowStr+0x5c>
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
 8002512:	e02a      	b.n	800256a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b0d      	cmp	r3, #13
 800251a:	d10b      	bne.n	8002534 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800251c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002520:	b29a      	uxth	r2, r3
 8002522:	89bb      	ldrh	r3, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002528:	8abb      	ldrh	r3, [r7, #20]
 800252a:	81fb      	strh	r3, [r7, #14]
					str++;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	3301      	adds	r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	e017      	b.n	8002564 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	88fc      	ldrh	r4, [r7, #6]
 800253a:	89b9      	ldrh	r1, [r7, #12]
 800253c:	89f8      	ldrh	r0, [r7, #14]
 800253e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4623      	mov	r3, r4
 8002550:	f7ff fcba 	bl	8001ec8 <lcd_ShowChar>
					x+=sizey/2;
 8002554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	b29a      	uxth	r2, r3
 800255e:	89fb      	ldrh	r3, [r7, #14]
 8002560:	4413      	add	r3, r2
 8002562:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1b2      	bne.n	80024d8 <lcd_ShowStr+0x20>
 8002572:	e000      	b.n	8002576 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002574:	bf00      	nop
			}
		}
	}
}
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	20000240 	.word	0x20000240

08002580 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <led7_Scan+0x104>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <led7_Scan+0x104>)
 800258e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <led7_Scan+0x108>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3d      	ldr	r2, [pc, #244]	; (800268c <led7_Scan+0x10c>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <led7_Scan+0x104>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <led7_Scan+0x104>)
 80025aa:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <led7_Scan+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d847      	bhi.n	8002644 <led7_Scan+0xc4>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <led7_Scan+0x3c>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025eb 	.word	0x080025eb
 80025c4:	08002609 	.word	0x08002609
 80025c8:	08002627 	.word	0x08002627
	case 0:
		spi_buffer |= 0x00b0;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <led7_Scan+0x104>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <led7_Scan+0x104>)
 80025d8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <led7_Scan+0x104>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <led7_Scan+0x104>)
 80025e6:	801a      	strh	r2, [r3, #0]
		break;
 80025e8:	e02d      	b.n	8002646 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <led7_Scan+0x104>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <led7_Scan+0x104>)
 80025f6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <led7_Scan+0x104>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f023 0320 	bic.w	r3, r3, #32
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <led7_Scan+0x104>)
 8002604:	801a      	strh	r2, [r3, #0]
		break;
 8002606:	e01e      	b.n	8002646 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <led7_Scan+0x104>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <led7_Scan+0x104>)
 8002614:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <led7_Scan+0x104>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f023 0310 	bic.w	r3, r3, #16
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <led7_Scan+0x104>)
 8002622:	801a      	strh	r2, [r3, #0]
		break;
 8002624:	e00f      	b.n	8002646 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <led7_Scan+0x104>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <led7_Scan+0x104>)
 8002632:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <led7_Scan+0x104>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <led7_Scan+0x104>)
 8002640:	801a      	strh	r2, [r3, #0]
		break;
 8002642:	e000      	b.n	8002646 <led7_Scan+0xc6>
	default:
		break;
 8002644:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <led7_Scan+0x108>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	425a      	negs	r2, r3
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	bf58      	it	pl
 8002658:	4253      	negpl	r3, r2
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <led7_Scan+0x108>)
 800265c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	480b      	ldr	r0, [pc, #44]	; (8002690 <led7_Scan+0x110>)
 8002664:	f002 f98a 	bl	800497c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002668:	2301      	movs	r3, #1
 800266a:	2202      	movs	r2, #2
 800266c:	4905      	ldr	r1, [pc, #20]	; (8002684 <led7_Scan+0x104>)
 800266e:	4809      	ldr	r0, [pc, #36]	; (8002694 <led7_Scan+0x114>)
 8002670:	f003 fe99 	bl	80063a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002674:	2201      	movs	r2, #1
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <led7_Scan+0x110>)
 800267a:	f002 f97f 	bl	800497c <HAL_GPIO_WritePin>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000000e 	.word	0x2000000e
 8002688:	20000248 	.word	0x20000248
 800268c:	20000000 	.word	0x20000000
 8002690:	40021800 	.word	0x40021800
 8002694:	20000260 	.word	0x20000260

08002698 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0e      	blt.n	80026ca <led7_SetDigit+0x32>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	dc0b      	bgt.n	80026ca <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <led7_SetDigit+0x40>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b2d9      	uxtb	r1, r3
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <led7_SetDigit+0x44>)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	460a      	mov	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
	}
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000004 	.word	0x20000004
 80026dc:	20000000 	.word	0x20000000

080026e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e4:	f000 fdf2 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e8:	f000 f830 	bl	800274c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ec:	f7ff f9a8 	bl	8001a40 <MX_GPIO_Init>
  MX_TIM2_Init();
 80026f0:	f000 fb46 	bl	8002d80 <MX_TIM2_Init>
  MX_SPI1_Init();
 80026f4:	f000 fa0e 	bl	8002b14 <MX_SPI1_Init>
  MX_FSMC_Init();
 80026f8:	f7fe fdb8 	bl	800126c <MX_FSMC_Init>
  MX_I2C1_Init();
 80026fc:	f7ff faa6 	bl	8001c4c <MX_I2C1_Init>
  MX_TIM13_Init();
 8002700:	f000 fb8a 	bl	8002e18 <MX_TIM13_Init>
  MX_DMA_Init();
 8002704:	f7fe fd0c 	bl	8001120 <MX_DMA_Init>
  MX_ADC1_Init();
 8002708:	f7fe fb52 	bl	8000db0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800270c:	f000 fcfc 	bl	8003108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002710:	f000 f886 	bl	8002820 <system_init>
  initFunc();
 8002714:	f7fe fe7a 	bl	800140c <initFunc>
  updateTime();
 8002718:	f7ff f92c 	bl	8001974 <updateTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 800271c:	2000      	movs	r0, #0
 800271e:	f7ff fb89 	bl	8001e34 <lcd_Clear>
  while (1)
  {
    while (!flag_timer2)
 8002722:	bf00      	nop
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <main+0x68>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0fb      	beq.n	8002724 <main+0x44>
      ;
    flag_timer2 = 0;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <main+0x68>)
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
    button_Scan();
 8002732:	f7fe fc67 	bl	8001004 <button_Scan>
    test_LedDebug();
 8002736:	f000 f887 	bl	8002848 <test_LedDebug>
    //    test_Adc();
    //    test_Buzzer();
    get_Adc();
 800273a:	f7fe ffb9 	bl	80016b0 <get_Adc>
    fsm_Buzzer();
 800273e:	f7ff f8a9 	bl	8001894 <fsm_Buzzer>
    time_and_comms();
 8002742:	f7ff f937 	bl	80019b4 <time_and_comms>
    while (!flag_timer2)
 8002746:	e7ec      	b.n	8002722 <main+0x42>
 8002748:	2000025a 	.word	0x2000025a

0800274c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	; 0x50
 8002750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002752:	f107 0320 	add.w	r3, r7, #32
 8002756:	2230      	movs	r2, #48	; 0x30
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f006 fd40 	bl	80091e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <SystemClock_Config+0xcc>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <SystemClock_Config+0xcc>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <SystemClock_Config+0xcc>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <SystemClock_Config+0xd0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <SystemClock_Config+0xd0>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <SystemClock_Config+0xd0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ac:	2301      	movs	r3, #1
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b0:	2310      	movs	r3, #16
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b4:	2302      	movs	r3, #2
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b8:	2300      	movs	r3, #0
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027bc:	2308      	movs	r3, #8
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027c0:	23a8      	movs	r3, #168	; 0xa8
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027c8:	2304      	movs	r3, #4
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 f8c7 	bl	8005964 <HAL_RCC_OscConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027dc:	f000 f858 	bl	8002890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027e0:	230f      	movs	r3, #15
 80027e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e4:	2302      	movs	r3, #2
 80027e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	2105      	movs	r1, #5
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fb28 	bl	8005e54 <HAL_RCC_ClockConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800280a:	f000 f841 	bl	8002890 <Error_Handler>
  }
}
 800280e:	bf00      	nop
 8002810:	3750      	adds	r7, #80	; 0x50
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000

08002820 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  timer_init();
 8002824:	f000 f926 	bl	8002a74 <timer_init>
  button_init();
 8002828:	f7fe fbe0 	bl	8000fec <button_init>
  lcd_init();
 800282c:	f7ff fce4 	bl	80021f8 <lcd_init>
  sensor_init();
 8002830:	f000 f834 	bl	800289c <sensor_init>
  buzzer_init();
 8002834:	f7fe fc52 	bl	80010dc <buzzer_init>
  uart_init_rs232();
 8002838:	f000 fbb2 	bl	8002fa0 <uart_init_rs232>
  setTimer2(50);
 800283c:	2032      	movs	r0, #50	; 0x32
 800283e:	f000 f923 	bl	8002a88 <setTimer2>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  count_led_debug = (count_led_debug + 1) % 20;
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <test_LedDebug+0x3c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <test_LedDebug+0x40>)
 8002854:	fb83 1302 	smull	r1, r3, r3, r2
 8002858:	10d9      	asrs	r1, r3, #3
 800285a:	17d3      	asrs	r3, r2, #31
 800285c:	1ac9      	subs	r1, r1, r3
 800285e:	460b      	mov	r3, r1
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	1ad1      	subs	r1, r2, r3
 8002868:	b2ca      	uxtb	r2, r1
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <test_LedDebug+0x3c>)
 800286c:	701a      	strb	r2, [r3, #0]
  if (count_led_debug == 0)
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <test_LedDebug+0x3c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <test_LedDebug+0x36>
  {
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002876:	2110      	movs	r1, #16
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <test_LedDebug+0x44>)
 800287a:	f002 f898 	bl	80049ae <HAL_GPIO_TogglePin>
  }
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000024c 	.word	0x2000024c
 8002888:	66666667 	.word	0x66666667
 800288c:	40021000 	.word	0x40021000

08002890 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002894:	b672      	cpsid	i
}
 8002896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002898:	e7fe      	b.n	8002898 <Error_Handler+0x8>
	...

0800289c <sensor_init>:
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t *)adc_receive, 5);
 80028a0:	2205      	movs	r2, #5
 80028a2:	4903      	ldr	r1, [pc, #12]	; (80028b0 <sensor_init+0x14>)
 80028a4:	4803      	ldr	r0, [pc, #12]	; (80028b4 <sensor_init+0x18>)
 80028a6:	f000 fdeb 	bl	8003480 <HAL_ADC_Start_DMA>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000250 	.word	0x20000250
 80028b4:	2000009c 	.word	0x2000009c

080028b8 <sensor_Read>:

void sensor_Read()
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_receive, 5);
 80028bc:	2205      	movs	r2, #5
 80028be:	4903      	ldr	r1, [pc, #12]	; (80028cc <sensor_Read+0x14>)
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <sensor_Read+0x18>)
 80028c2:	f000 fddd 	bl	8003480 <HAL_ADC_Start_DMA>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000250 	.word	0x20000250
 80028d0:	2000009c 	.word	0x2000009c

080028d4 <sensor_GetLight>:

uint16_t sensor_GetLight()
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <sensor_GetLight+0x14>)
 80028da:	889b      	ldrh	r3, [r3, #4]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000250 	.word	0x20000250

080028ec <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer()
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <sensor_GetPotentiometer+0x14>)
 80028f2:	88db      	ldrh	r3, [r3, #6]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000250 	.word	0x20000250
 8002904:	00000000 	.word	0x00000000

08002908 <sensor_GetVoltage>:

float sensor_GetVoltage()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <sensor_GetVoltage+0x70>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe0c 	bl	8000538 <__aeabi_f2d>
 8002920:	a311      	add	r3, pc, #68	; (adr r3, 8002968 <sensor_GetVoltage+0x60>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fe5f 	bl	80005e8 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <sensor_GetVoltage+0x74>)
 8002938:	f7fd fe56 	bl	80005e8 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	a30a      	add	r3, pc, #40	; (adr r3, 8002970 <sensor_GetVoltage+0x68>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd ff77 	bl	800083c <__aeabi_ddiv>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f859 	bl	8000a0c <__aeabi_d2f>
 800295a:	4603      	mov	r3, r0
 800295c:	ee07 3a90 	vmov	s15, r3
}
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	66666666 	.word	0x66666666
 800296c:	400a6666 	.word	0x400a6666
 8002970:	cccccccd 	.word	0xcccccccd
 8002974:	40b908ac 	.word	0x40b908ac
 8002978:	20000250 	.word	0x20000250
 800297c:	40280000 	.word	0x40280000

08002980 <sensor_GetCurrent>:

float sensor_GetCurrent()
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5 / 2.5; 
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <sensor_GetCurrent+0xa8>)
 8002986:	885b      	ldrh	r3, [r3, #2]
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002990:	ee17 0a90 	vmov	r0, s15
 8002994:	f7fd fdd0 	bl	8000538 <__aeabi_f2d>
 8002998:	a31f      	add	r3, pc, #124	; (adr r3, 8002a18 <sensor_GetCurrent+0x98>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe23 	bl	80005e8 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <sensor_GetCurrent+0xac>)
 80029b0:	f7fd fe1a 	bl	80005e8 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	a318      	add	r3, pc, #96	; (adr r3, 8002a20 <sensor_GetCurrent+0xa0>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd ff3b 	bl	800083c <__aeabi_ddiv>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <sensor_GetCurrent+0xb0>)
 80029d4:	f7fd fc50 	bl	8000278 <__aeabi_dsub>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <sensor_GetCurrent+0xb4>)
 80029e6:	f7fd fdff 	bl	80005e8 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <sensor_GetCurrent+0xb0>)
 80029f8:	f7fd ff20 	bl	800083c <__aeabi_ddiv>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f802 	bl	8000a0c <__aeabi_d2f>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	ee07 3a90 	vmov	s15, r3
}
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	66666666 	.word	0x66666666
 8002a1c:	400a6666 	.word	0x400a6666
 8002a20:	147ae148 	.word	0x147ae148
 8002a24:	40a4b2ee 	.word	0x40a4b2ee
 8002a28:	20000250 	.word	0x20000250
 8002a2c:	408f4000 	.word	0x408f4000
 8002a30:	40040000 	.word	0x40040000
 8002a34:	40140000 	.word	0x40140000

08002a38 <sensor_GetTemperature>:

float sensor_GetTemperature()
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4] * 330) / (4095);
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <sensor_GetTemperature+0x30>)
 8002a3e:	891b      	ldrh	r3, [r3, #8]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a48:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a6c <sensor_GetTemperature+0x34>
 8002a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a50:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a70 <sensor_GetTemperature+0x38>
 8002a54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a58:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20000250 	.word	0x20000250
 8002a6c:	43a50000 	.word	0x43a50000
 8002a70:	457ff000 	.word	0x457ff000

08002a74 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <timer_init+0x10>)
 8002a7a:	f004 fa4b 	bl	8006f14 <HAL_TIM_Base_Start_IT>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002bc 	.word	0x200002bc

08002a88 <setTimer2>:

void setTimer2(uint16_t duration){
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <setTimer2+0x2c>)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <setTimer2+0x2c>)
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <setTimer2+0x30>)
 8002a9e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <setTimer2+0x34>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000025e 	.word	0x2000025e
 8002ab8:	2000025c 	.word	0x2000025c
 8002abc:	2000025a 	.word	0x2000025a

08002ac0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d116      	bne.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ae4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002afa:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002afc:	f7ff fd40 	bl	8002580 <led7_Scan>
	}
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000025c 	.word	0x2000025c
 8002b0c:	2000025a 	.word	0x2000025a
 8002b10:	2000025e 	.word	0x2000025e

08002b14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b1a:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <MX_SPI1_Init+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b60:	220a      	movs	r2, #10
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <MX_SPI1_Init+0x64>)
 8002b66:	f003 fb95 	bl	8006294 <HAL_SPI_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b70:	f7ff fe8e 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000260 	.word	0x20000260
 8002b7c:	40013000 	.word	0x40013000

08002b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_SPI_MspInit+0x84>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12b      	bne.n	8002bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_SPI_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bda:	2338      	movs	r3, #56	; 0x38
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bea:	2305      	movs	r3, #5
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_SPI_MspInit+0x8c>)
 8002bf6:	f001 fd25 	bl	8004644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3728      	adds	r7, #40	; 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40013000 	.word	0x40013000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020400 	.word	0x40020400

08002c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler+0x4>

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 fb60 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <TIM2_IRQHandler+0x10>)
 8002cba:	f004 fabd 	bl	8007238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200002bc 	.word	0x200002bc

08002cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART1_IRQHandler+0x10>)
 8002cce:	f005 fa1d 	bl	800810c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200003d4 	.word	0x200003d4

08002cdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <DMA2_Stream0_IRQHandler+0x10>)
 8002ce2:	f001 fa45 	bl	8004170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200000e4 	.word	0x200000e4

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f006 fa34 	bl	800918c <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20020000 	.word	0x20020000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	200002b8 	.word	0x200002b8
 8002d58:	20000430 	.word	0x20000430

08002d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <SystemInit+0x20>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <SystemInit+0x20>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d94:	463b      	mov	r3, r7
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002da6:	f240 3247 	movw	r2, #839	; 0x347
 8002daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002db4:	2263      	movs	r2, #99	; 0x63
 8002db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dc4:	4813      	ldr	r0, [pc, #76]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002dc6:	f004 f855 	bl	8006e74 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002dd0:	f7ff fd5e 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	4619      	mov	r1, r3
 8002de0:	480c      	ldr	r0, [pc, #48]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002de2:	f004 fbf3 	bl	80075cc <HAL_TIM_ConfigClockSource>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dec:	f7ff fd50 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002df8:	463b      	mov	r3, r7
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_TIM2_Init+0x94>)
 8002dfe:	f004 ffe5 	bl	8007dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e08:	f7ff fd42 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e0c:	bf00      	nop
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200002bc 	.word	0x200002bc

08002e18 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	615a      	str	r2, [r3, #20]
 8002e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <MX_TIM13_Init+0x98>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e38:	f240 3247 	movw	r2, #839	; 0x347
 8002e3c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e46:	2263      	movs	r2, #99	; 0x63
 8002e48:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e58:	f004 f80c 	bl	8006e74 <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e62:	f7ff fd15 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e68:	f004 f8c4 	bl	8006ff4 <HAL_TIM_PWM_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e72:	f7ff fd0d 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e76:	2360      	movs	r3, #96	; 0x60
 8002e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4807      	ldr	r0, [pc, #28]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e8e:	f004 fadb 	bl	8007448 <HAL_TIM_PWM_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e98:	f7ff fcfa 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <MX_TIM13_Init+0x94>)
 8002e9e:	f000 f845 	bl	8002f2c <HAL_TIM_MspPostInit>

}
 8002ea2:	bf00      	nop
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000304 	.word	0x20000304
 8002eb0:	40001c00 	.word	0x40001c00

08002eb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d116      	bne.n	8002ef4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	201c      	movs	r0, #28
 8002ee8:	f000 ff73 	bl	8003dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eec:	201c      	movs	r0, #28
 8002eee:	f000 ff8c 	bl	8003e0a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002ef2:	e012      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_TIM_Base_MspInit+0x74>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10d      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_TIM_Base_MspInit+0x70>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40001c00 	.word	0x40001c00

08002f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d11e      	bne.n	8002f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f58:	f043 0320 	orr.w	r3, r3, #32
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f7c:	2309      	movs	r3, #9
 8002f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	4619      	mov	r1, r3
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <HAL_TIM_MspPostInit+0x70>)
 8002f88:	f001 fb5c 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40001c00 	.word	0x40001c00
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40021400 	.word	0x40021400

08002fa0 <uart_init_rs232>:
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
uint8_t msg[100];

void uart_init_rs232()
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <uart_init_rs232+0x14>)
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <uart_init_rs232+0x18>)
 8002faa:	f005 f87e 	bl	80080aa <HAL_UART_Receive_IT>
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000034c 	.word	0x2000034c
 8002fb8:	200003d4 	.word	0x200003d4

08002fbc <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (void *)msg, sprintf((void *)msg, "%s", str), 10);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <uart_Rs232SendString+0x28>)
 8002fc8:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <uart_Rs232SendString+0x2c>)
 8002fca:	f006 f911 	bl	80091f0 <siprintf>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <uart_Rs232SendString+0x2c>)
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <uart_Rs232SendString+0x30>)
 8002fd8:	f004 ffd5 	bl	8007f86 <HAL_UART_Transmit>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	08009b88 	.word	0x08009b88
 8002fe8:	20000370 	.word	0x20000370
 8002fec:	200003d4 	.word	0x200003d4

08002ff0 <uart_Rs232SendNum>:
{
    HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    if (num == 0)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <uart_Rs232SendNum+0x16>
    {
        uart_Rs232SendString("0");
 8002ffe:	4824      	ldr	r0, [pc, #144]	; (8003090 <uart_Rs232SendNum+0xa0>)
 8003000:	f7ff ffdc 	bl	8002fbc <uart_Rs232SendString>
        return;
 8003004:	e040      	b.n	8003088 <uart_Rs232SendNum+0x98>
    }
    uint8_t num_flag = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
    int i;
    if (num < 0)
        uart_Rs232SendString("-");
    for (i = 10; i > 0; i--)
 800300a:	230a      	movs	r3, #10
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	e038      	b.n	8003082 <uart_Rs232SendNum+0x92>
    {
        if ((num / mypow(10, i - 1)) != 0)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	4619      	mov	r1, r3
 8003016:	200a      	movs	r0, #10
 8003018:	f7ff f826 	bl	8002068 <mypow>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4293      	cmp	r3, r2
 8003024:	d315      	bcc.n	8003052 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
            sprintf((void *)msg, "%d", num / mypow(10, i - 1));
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	4619      	mov	r1, r3
 8003030:	200a      	movs	r0, #10
 8003032:	f7ff f819 	bl	8002068 <mypow>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4914      	ldr	r1, [pc, #80]	; (8003094 <uart_Rs232SendNum+0xa4>)
 8003044:	4814      	ldr	r0, [pc, #80]	; (8003098 <uart_Rs232SendNum+0xa8>)
 8003046:	f006 f8d3 	bl	80091f0 <siprintf>
            uart_Rs232SendString(msg);
 800304a:	4813      	ldr	r0, [pc, #76]	; (8003098 <uart_Rs232SendNum+0xa8>)
 800304c:	f7ff ffb6 	bl	8002fbc <uart_Rs232SendString>
 8003050:	e005      	b.n	800305e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if (num_flag != 0)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <uart_Rs232SendNum+0x6e>
                uart_Rs232SendString("0");
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <uart_Rs232SendNum+0xa0>)
 800305a:	f7ff ffaf 	bl	8002fbc <uart_Rs232SendString>
        }
        num %= mypow(10, i - 1);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3b01      	subs	r3, #1
 8003062:	4619      	mov	r1, r3
 8003064:	200a      	movs	r0, #10
 8003066:	f7fe ffff 	bl	8002068 <mypow>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	fbb3 f1f2 	udiv	r1, r3, r2
 8003074:	fb01 f202 	mul.w	r2, r1, r2
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	607b      	str	r3, [r7, #4]
    for (i = 10; i > 0; i--)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3b01      	subs	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dcc3      	bgt.n	8003010 <uart_Rs232SendNum+0x20>
    }
}
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	08009b8c 	.word	0x08009b8c
 8003094:	08009b90 	.word	0x08009b90
 8003098:	20000370 	.word	0x20000370

0800309c <HAL_UART_RxCpltCallback>:
    sprintf((void *)msg, "%ld", num % 100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_UART_RxCpltCallback+0x54>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d11b      	bne.n	80030e6 <HAL_UART_RxCpltCallback+0x4a>
    {
        // rs232 isr
        // can be modified
        // HAL_UART_Transmit(&huart1, &byte_recv, 1, 10);
        buffer_byte[index_buffer] = byte_recv;
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_UART_RxCpltCallback+0x58>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_UART_RxCpltCallback+0x5c>)
 80030b6:	7819      	ldrb	r1, [r3, #0]
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_UART_RxCpltCallback+0x60>)
 80030ba:	5499      	strb	r1, [r3, r2]
        index_buffer++;
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_UART_RxCpltCallback+0x58>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_UART_RxCpltCallback+0x58>)
 80030c6:	701a      	strb	r2, [r3, #0]
        if (index_buffer == MAX_BUFFER_SIZE)
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_UART_RxCpltCallback+0x58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b1e      	cmp	r3, #30
 80030ce:	d102      	bne.n	80030d6 <HAL_UART_RxCpltCallback+0x3a>
            index_buffer = 0;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_UART_RxCpltCallback+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
        buffer_flag = 1;
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_UART_RxCpltCallback+0x64>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
        // turn on the receice interrupt
        HAL_UART_Receive_IT(&huart1, &byte_recv, 1);
 80030dc:	2201      	movs	r2, #1
 80030de:	4906      	ldr	r1, [pc, #24]	; (80030f8 <HAL_UART_RxCpltCallback+0x5c>)
 80030e0:	4808      	ldr	r0, [pc, #32]	; (8003104 <HAL_UART_RxCpltCallback+0x68>)
 80030e2:	f004 ffe2 	bl	80080aa <HAL_UART_Receive_IT>
    }
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40011000 	.word	0x40011000
 80030f4:	2000036e 	.word	0x2000036e
 80030f8:	2000034c 	.word	0x2000034c
 80030fc:	20000350 	.word	0x20000350
 8003100:	2000036f 	.word	0x2000036f
 8003104:	200003d4 	.word	0x200003d4

08003108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <MX_USART1_UART_Init+0x50>)
 8003110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003140:	f004 fed4 	bl	8007eec <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314a:	f7ff fba1 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003d4 	.word	0x200003d4
 8003158:	40011000 	.word	0x40011000

0800315c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_UART_MspInit+0x94>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d134      	bne.n	80031e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003188:	f043 0310 	orr.w	r3, r3, #16
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_UART_MspInit+0x98>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_UART_MspInit+0x98>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c4:	2303      	movs	r3, #3
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031c8:	2307      	movs	r3, #7
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	4809      	ldr	r0, [pc, #36]	; (80031f8 <HAL_UART_MspInit+0x9c>)
 80031d4:	f001 fa36 	bl	8004644 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	2025      	movs	r0, #37	; 0x25
 80031de:	f000 fdf8 	bl	8003dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031e2:	2025      	movs	r0, #37	; 0x25
 80031e4:	f000 fe11 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020000 	.word	0x40020000

080031fc <BCD2DEC>:
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4413      	add	r3, r2
 8003220:	b2db      	uxtb	r3, r3
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <DEC2BCD+0x44>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	b258      	sxtb	r0, r3
 800324a:	79fa      	ldrb	r2, [r7, #7]
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <DEC2BCD+0x44>)
 800324e:	fba3 1302 	umull	r1, r3, r3, r2
 8003252:	08d9      	lsrs	r1, r3, #3
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	b25b      	sxtb	r3, r3
 8003262:	4303      	orrs	r3, r0
 8003264:	b25b      	sxtb	r3, r3
 8003266:	b2db      	uxtb	r3, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	cccccccd 	.word	0xcccccccd

08003278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800327e:	490e      	ldr	r1, [pc, #56]	; (80032b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003294:	4c0b      	ldr	r4, [pc, #44]	; (80032c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032a2:	f7ff fd5b 	bl	8002d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f005 ff77 	bl	8009198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032aa:	f7ff fa19 	bl	80026e0 <main>
  bx  lr    
 80032ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80032bc:	0800cb80 	.word	0x0800cb80
  ldr r2, =_sbss
 80032c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80032c4:	2000042c 	.word	0x2000042c

080032c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC_IRQHandler>
	...

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_Init+0x40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_Init+0x40>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_Init+0x40>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_Init+0x40>)
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_Init+0x40>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f000 fd61 	bl	8003dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fa:	200f      	movs	r0, #15
 80032fc:	f000 f808 	bl	8003310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003300:	f7ff fc86 	bl	8002c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023c00 	.word	0x40023c00

08003310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x54>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x58>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd79 	bl	8003e26 <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 fd41 	bl	8003dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x5c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000010 	.word	0x20000010
 8003368:	20000018 	.word	0x20000018
 800336c:	20000014 	.word	0x20000014

08003370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000018 	.word	0x20000018
 8003394:	20000418 	.word	0x20000418

08003398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000418 	.word	0x20000418

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff ffee 	bl	8003398 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_Delay+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033d6:	bf00      	nop
 80033d8:	f7ff ffde 	bl	8003398 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000018 	.word	0x20000018

080033f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e033      	b.n	8003476 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fd54 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800343e:	f023 0302 	bic.w	r3, r3, #2
 8003442:	f043 0202 	orr.w	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa68 	bl	8003920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
 8003466:	e001      	b.n	800346c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_ADC_Start_DMA+0x1e>
 800349a:	2302      	movs	r3, #2
 800349c:	e0e9      	b.n	8003672 <HAL_ADC_Start_DMA+0x1f2>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d018      	beq.n	80034e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034c4:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_ADC_Start_DMA+0x1fc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6d      	ldr	r2, [pc, #436]	; (8003680 <HAL_ADC_Start_DMA+0x200>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0c9a      	lsrs	r2, r3, #18
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3b01      	subs	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d107      	bne.n	8003506 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 80a1 	bne.w	8003658 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003540:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d106      	bne.n	8003564 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f023 0206 	bic.w	r2, r3, #6
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
 8003562:	e002      	b.n	800356a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_ADC_Start_DMA+0x204>)
 8003574:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	4a43      	ldr	r2, [pc, #268]	; (8003688 <HAL_ADC_Start_DMA+0x208>)
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	4a42      	ldr	r2, [pc, #264]	; (800368c <HAL_ADC_Start_DMA+0x20c>)
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_ADC_Start_DMA+0x210>)
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003596:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	334c      	adds	r3, #76	; 0x4c
 80035c2:	4619      	mov	r1, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f000 fce8 	bl	8003f9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d12a      	bne.n	800362e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_ADC_Start_DMA+0x214>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d015      	beq.n	800360e <HAL_ADC_Start_DMA+0x18e>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <HAL_ADC_Start_DMA+0x218>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d105      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x178>
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_ADC_Start_DMA+0x204>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <HAL_ADC_Start_DMA+0x21c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d136      	bne.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_ADC_Start_DMA+0x204>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d130      	bne.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d129      	bne.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e020      	b.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_ADC_Start_DMA+0x214>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d11b      	bne.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d114      	bne.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	e00b      	b.n	8003670 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000010 	.word	0x20000010
 8003680:	431bde83 	.word	0x431bde83
 8003684:	40012300 	.word	0x40012300
 8003688:	08003b19 	.word	0x08003b19
 800368c:	08003bd3 	.word	0x08003bd3
 8003690:	08003bef 	.word	0x08003bef
 8003694:	40012000 	.word	0x40012000
 8003698:	40012100 	.word	0x40012100
 800369c:	40012200 	.word	0x40012200

080036a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x1c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e105      	b.n	8003904 <HAL_ADC_ConfigChannel+0x228>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b09      	cmp	r3, #9
 8003706:	d925      	bls.n	8003754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	3b1e      	subs	r3, #30
 800371e:	2207      	movs	r2, #7
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43da      	mvns	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	400a      	ands	r2, r1
 800372c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68d9      	ldr	r1, [r3, #12]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	4618      	mov	r0, r3
 8003740:	4603      	mov	r3, r0
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4403      	add	r3, r0
 8003746:	3b1e      	subs	r3, #30
 8003748:	409a      	lsls	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	e022      	b.n	800379a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6919      	ldr	r1, [r3, #16]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	2207      	movs	r2, #7
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	400a      	ands	r2, r1
 8003776:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	4618      	mov	r0, r3
 800378a:	4603      	mov	r3, r0
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4403      	add	r3, r0
 8003790:	409a      	lsls	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d824      	bhi.n	80037ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	3b05      	subs	r3, #5
 80037b4:	221f      	movs	r2, #31
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	400a      	ands	r2, r1
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	3b05      	subs	r3, #5
 80037de:	fa00 f203 	lsl.w	r2, r0, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ea:	e04c      	b.n	8003886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d824      	bhi.n	800383e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	3b23      	subs	r3, #35	; 0x23
 8003806:	221f      	movs	r2, #31
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43da      	mvns	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	400a      	ands	r2, r1
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4618      	mov	r0, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3b23      	subs	r3, #35	; 0x23
 8003830:	fa00 f203 	lsl.w	r2, r0, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
 800383c:	e023      	b.n	8003886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	3b41      	subs	r3, #65	; 0x41
 8003850:	221f      	movs	r2, #31
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	400a      	ands	r2, r1
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	4618      	mov	r0, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	3b41      	subs	r3, #65	; 0x41
 800387a:	fa00 f203 	lsl.w	r2, r0, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_ADC_ConfigChannel+0x234>)
 8003888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	; (8003914 <HAL_ADC_ConfigChannel+0x238>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d109      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x1cc>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b12      	cmp	r3, #18
 800389a:	d105      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_ADC_ConfigChannel+0x238>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d123      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x21e>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d003      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x1e6>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b11      	cmp	r3, #17
 80038c0:	d11b      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d111      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_ADC_ConfigChannel+0x23c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_ADC_ConfigChannel+0x240>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	0c9a      	lsrs	r2, r3, #18
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038ec:	e002      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f9      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40012300 	.word	0x40012300
 8003914:	40012000 	.word	0x40012000
 8003918:	20000010 	.word	0x20000010
 800391c:	431bde83 	.word	0x431bde83

08003920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <ADC_Init+0x1f0>)
 800392a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <ADC_Init+0x1f4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6899      	ldr	r1, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	e00f      	b.n	8003a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0202 	bic.w	r2, r2, #2
 8003a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7e1b      	ldrb	r3, [r3, #24]
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	3b01      	subs	r3, #1
 8003a78:	035a      	lsls	r2, r3, #13
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	e007      	b.n	8003a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	051a      	lsls	r2, r3, #20
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad6:	025a      	lsls	r2, r3, #9
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	029a      	lsls	r2, r3, #10
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40012300 	.word	0x40012300
 8003b14:	0f000001 	.word	0x0f000001

08003b18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13c      	bne.n	8003bac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d12b      	bne.n	8003ba4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d127      	bne.n	8003ba4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d119      	bne.n	8003ba4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0220 	bic.w	r2, r2, #32
 8003b7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fd7b 	bl	80036a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003baa:	e00e      	b.n	8003bca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fd85 	bl	80036c8 <HAL_ADC_ErrorCallback>
}
 8003bbe:	e004      	b.n	8003bca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff fd67 	bl	80036b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2240      	movs	r2, #64	; 0x40
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff fd5a 	bl	80036c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d88:	d301      	bcc.n	8003d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <SysTick_Config+0x40>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d96:	210f      	movs	r1, #15
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	f7ff ff8e 	bl	8003cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <SysTick_Config+0x40>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <SysTick_Config+0x40>)
 8003da8:	2207      	movs	r2, #7
 8003daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010

08003dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff29 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff3e 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff8e 	bl	8003d10 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5d 	bl	8003cbc <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff31 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa2 	bl	8003d78 <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff faa4 	bl	8003398 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e099      	b.n	8003f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e7c:	e00f      	b.n	8003e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e7e:	f7ff fa8b 	bl	8003398 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d908      	bls.n	8003e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e078      	b.n	8003f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e8      	bne.n	8003e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <HAL_DMA_Init+0x158>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d107      	bne.n	8003f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4313      	orrs	r3, r2
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d117      	bne.n	8003f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb01 	bl	800454c <DMA_CheckFifoParam>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e016      	b.n	8003f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fab8 	bl	80044e0 <DMA_CalcBaseAndBitshift>
 8003f70:	4603      	mov	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	223f      	movs	r2, #63	; 0x3f
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	f010803f 	.word	0xf010803f

08003f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_DMA_Start_IT+0x26>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e040      	b.n	8004044 <HAL_DMA_Start_IT+0xa8>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d12f      	bne.n	8004036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa4a 	bl	8004484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	223f      	movs	r2, #63	; 0x3f
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0216 	orr.w	r2, r2, #22
 800400a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0208 	orr.w	r2, r2, #8
 8004022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e005      	b.n	8004042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800405a:	f7ff f99d 	bl	8003398 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d008      	beq.n	800407e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e052      	b.n	8004124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0216 	bic.w	r2, r2, #22
 800408c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_DMA_Abort+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0208 	bic.w	r2, r2, #8
 80040bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ce:	e013      	b.n	80040f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040d0:	f7ff f962 	bl	8003398 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d90c      	bls.n	80040f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e015      	b.n	8004124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e4      	bne.n	80040d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410a:	223f      	movs	r2, #63	; 0x3f
 800410c:	409a      	lsls	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d004      	beq.n	800414a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e00c      	b.n	8004164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2205      	movs	r2, #5
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800417c:	4b8e      	ldr	r3, [pc, #568]	; (80043b8 <HAL_DMA_IRQHandler+0x248>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a8e      	ldr	r2, [pc, #568]	; (80043bc <HAL_DMA_IRQHandler+0x24c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2208      	movs	r2, #8
 800419c:	409a      	lsls	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01a      	beq.n	80041dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	2208      	movs	r2, #8
 80041ca:	409a      	lsls	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0202 	orr.w	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	2204      	movs	r2, #4
 8004218:	409a      	lsls	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d012      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	2204      	movs	r2, #4
 8004236:	409a      	lsls	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	2210      	movs	r2, #16
 800424e:	409a      	lsls	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d043      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03c      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	2210      	movs	r2, #16
 800426c:	409a      	lsls	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e01f      	b.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
 80042b0:	e016      	b.n	80042e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0208 	bic.w	r2, r2, #8
 80042ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	2220      	movs	r2, #32
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 808f 	beq.w	8004410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8087 	beq.w	8004410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	2220      	movs	r2, #32
 8004308:	409a      	lsls	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b05      	cmp	r3, #5
 8004318:	d136      	bne.n	8004388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0216 	bic.w	r2, r2, #22
 8004328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_DMA_IRQHandler+0x1da>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	223f      	movs	r2, #63	; 0x3f
 8004360:	409a      	lsls	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07e      	beq.n	800447c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
        }
        return;
 8004386:	e079      	b.n	800447c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d031      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	e02c      	b.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
 80043b6:	bf00      	nop
 80043b8:	20000010 	.word	0x20000010
 80043bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d023      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
 80043d0:	e01e      	b.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10f      	bne.n	8004400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0210 	bic.w	r2, r2, #16
 80043ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	2b00      	cmp	r3, #0
 8004416:	d032      	beq.n	800447e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d022      	beq.n	800446a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2205      	movs	r2, #5
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3301      	adds	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d307      	bcc.n	8004458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f2      	bne.n	800443c <HAL_DMA_IRQHandler+0x2cc>
 8004456:	e000      	b.n	800445a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
 800447a:	e000      	b.n	800447e <HAL_DMA_IRQHandler+0x30e>
        return;
 800447c:	bf00      	nop
    }
  }
}
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d108      	bne.n	80044c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044c2:	e007      	b.n	80044d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3b10      	subs	r3, #16
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <DMA_CalcBaseAndBitshift+0x64>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <DMA_CalcBaseAndBitshift+0x68>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d909      	bls.n	8004522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	659a      	str	r2, [r3, #88]	; 0x58
 8004520:	e007      	b.n	8004532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	0800cb34 	.word	0x0800cb34

0800454c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d856      	bhi.n	800461a <DMA_CheckFifoParam+0xce>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <DMA_CheckFifoParam+0x28>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	08004597 	.word	0x08004597
 800457c:	08004585 	.word	0x08004585
 8004580:	0800461b 	.word	0x0800461b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d046      	beq.n	800461e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e043      	b.n	800461e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459e:	d140      	bne.n	8004622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e03d      	b.n	8004622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	d121      	bne.n	80045f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d837      	bhi.n	8004626 <DMA_CheckFifoParam+0xda>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x70>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045d3 	.word	0x080045d3
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	080045e5 	.word	0x080045e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e030      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d025      	beq.n	800462a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e022      	b.n	800462a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ec:	d11f      	bne.n	800462e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045f2:	e01c      	b.n	800462e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d903      	bls.n	8004602 <DMA_CheckFifoParam+0xb6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004600:	e018      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      break;
 8004606:	e015      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e00b      	b.n	8004632 <DMA_CheckFifoParam+0xe6>
      break;
 800461a:	bf00      	nop
 800461c:	e00a      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e008      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;   
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004632:	bf00      	nop
    }
  } 
  
  return status; 
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	; 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e16b      	b.n	8004938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	f040 815a 	bne.w	8004932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d005      	beq.n	8004696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004692:	2b02      	cmp	r3, #2
 8004694:	d130      	bne.n	80046f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 0201 	and.w	r2, r3, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b03      	cmp	r3, #3
 8004702:	d017      	beq.n	8004734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d123      	bne.n	8004788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	08da      	lsrs	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3208      	adds	r2, #8
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	69b9      	ldr	r1, [r7, #24]
 8004784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80b4 	beq.w	8004932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b60      	ldr	r3, [pc, #384]	; (8004950 <HAL_GPIO_Init+0x30c>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a5f      	ldr	r2, [pc, #380]	; (8004950 <HAL_GPIO_Init+0x30c>)
 80047d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_GPIO_Init+0x30c>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e6:	4a5b      	ldr	r2, [pc, #364]	; (8004954 <HAL_GPIO_Init+0x310>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a52      	ldr	r2, [pc, #328]	; (8004958 <HAL_GPIO_Init+0x314>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02b      	beq.n	800486a <HAL_GPIO_Init+0x226>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a51      	ldr	r2, [pc, #324]	; (800495c <HAL_GPIO_Init+0x318>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d025      	beq.n	8004866 <HAL_GPIO_Init+0x222>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a50      	ldr	r2, [pc, #320]	; (8004960 <HAL_GPIO_Init+0x31c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01f      	beq.n	8004862 <HAL_GPIO_Init+0x21e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a4f      	ldr	r2, [pc, #316]	; (8004964 <HAL_GPIO_Init+0x320>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d019      	beq.n	800485e <HAL_GPIO_Init+0x21a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a4e      	ldr	r2, [pc, #312]	; (8004968 <HAL_GPIO_Init+0x324>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_GPIO_Init+0x216>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a4d      	ldr	r2, [pc, #308]	; (800496c <HAL_GPIO_Init+0x328>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00d      	beq.n	8004856 <HAL_GPIO_Init+0x212>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a4c      	ldr	r2, [pc, #304]	; (8004970 <HAL_GPIO_Init+0x32c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <HAL_GPIO_Init+0x20e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a4b      	ldr	r2, [pc, #300]	; (8004974 <HAL_GPIO_Init+0x330>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_GPIO_Init+0x20a>
 800484a:	2307      	movs	r3, #7
 800484c:	e00e      	b.n	800486c <HAL_GPIO_Init+0x228>
 800484e:	2308      	movs	r3, #8
 8004850:	e00c      	b.n	800486c <HAL_GPIO_Init+0x228>
 8004852:	2306      	movs	r3, #6
 8004854:	e00a      	b.n	800486c <HAL_GPIO_Init+0x228>
 8004856:	2305      	movs	r3, #5
 8004858:	e008      	b.n	800486c <HAL_GPIO_Init+0x228>
 800485a:	2304      	movs	r3, #4
 800485c:	e006      	b.n	800486c <HAL_GPIO_Init+0x228>
 800485e:	2303      	movs	r3, #3
 8004860:	e004      	b.n	800486c <HAL_GPIO_Init+0x228>
 8004862:	2302      	movs	r3, #2
 8004864:	e002      	b.n	800486c <HAL_GPIO_Init+0x228>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x228>
 800486a:	2300      	movs	r3, #0
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f002 0203 	and.w	r2, r2, #3
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	4093      	lsls	r3, r2
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487c:	4935      	ldr	r1, [pc, #212]	; (8004954 <HAL_GPIO_Init+0x310>)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488a:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_GPIO_Init+0x334>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ae:	4a32      	ldr	r2, [pc, #200]	; (8004978 <HAL_GPIO_Init+0x334>)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b4:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_GPIO_Init+0x334>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <HAL_GPIO_Init+0x334>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_GPIO_Init+0x334>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004902:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <HAL_GPIO_Init+0x334>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_GPIO_Init+0x334>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800492c:	4a12      	ldr	r2, [pc, #72]	; (8004978 <HAL_GPIO_Init+0x334>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	f67f ae90 	bls.w	8004660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	40013800 	.word	0x40013800
 8004958:	40020000 	.word	0x40020000
 800495c:	40020400 	.word	0x40020400
 8004960:	40020800 	.word	0x40020800
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40021000 	.word	0x40021000
 800496c:	40021400 	.word	0x40021400
 8004970:	40021800 	.word	0x40021800
 8004974:	40021c00 	.word	0x40021c00
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
 8004988:	4613      	mov	r3, r2
 800498a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800498c:	787b      	ldrb	r3, [r7, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004998:	e003      	b.n	80049a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	041a      	lsls	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4013      	ands	r3, r2
 80049c6:	041a      	lsls	r2, r3, #16
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	43d9      	mvns	r1, r3
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	400b      	ands	r3, r1
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	619a      	str	r2, [r3, #24]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e12b      	b.n	8004c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd f94c 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a48:	f001 fbfc 	bl	8006244 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a81      	ldr	r2, [pc, #516]	; (8004c58 <HAL_I2C_Init+0x274>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d807      	bhi.n	8004a68 <HAL_I2C_Init+0x84>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a80      	ldr	r2, [pc, #512]	; (8004c5c <HAL_I2C_Init+0x278>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bf94      	ite	ls
 8004a60:	2301      	movls	r3, #1
 8004a62:	2300      	movhi	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e006      	b.n	8004a76 <HAL_I2C_Init+0x92>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a7d      	ldr	r2, [pc, #500]	; (8004c60 <HAL_I2C_Init+0x27c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bf94      	ite	ls
 8004a70:	2301      	movls	r3, #1
 8004a72:	2300      	movhi	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0e7      	b.n	8004c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a78      	ldr	r2, [pc, #480]	; (8004c64 <HAL_I2C_Init+0x280>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0c9b      	lsrs	r3, r3, #18
 8004a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a6a      	ldr	r2, [pc, #424]	; (8004c58 <HAL_I2C_Init+0x274>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d802      	bhi.n	8004ab8 <HAL_I2C_Init+0xd4>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	e009      	b.n	8004acc <HAL_I2C_Init+0xe8>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	4a69      	ldr	r2, [pc, #420]	; (8004c68 <HAL_I2C_Init+0x284>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	3301      	adds	r3, #1
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	495c      	ldr	r1, [pc, #368]	; (8004c58 <HAL_I2C_Init+0x274>)
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d819      	bhi.n	8004b20 <HAL_I2C_Init+0x13c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1e59      	subs	r1, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b00:	400b      	ands	r3, r1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_I2C_Init+0x138>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1e59      	subs	r1, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1a:	e051      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e04f      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d111      	bne.n	8004b4c <HAL_I2C_Init+0x168>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	440b      	add	r3, r1
 8004b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e012      	b.n	8004b72 <HAL_I2C_Init+0x18e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e58      	subs	r0, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	0099      	lsls	r1, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Init+0x196>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e022      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10e      	bne.n	8004ba0 <HAL_I2C_Init+0x1bc>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1e58      	subs	r0, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	440b      	add	r3, r1
 8004b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b94:	3301      	adds	r3, #1
 8004b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9e:	e00f      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1e58      	subs	r0, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	0099      	lsls	r1, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	6809      	ldr	r1, [r1, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6911      	ldr	r1, [r2, #16]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	000186a0 	.word	0x000186a0
 8004c5c:	001e847f 	.word	0x001e847f
 8004c60:	003d08ff 	.word	0x003d08ff
 8004c64:	431bde83 	.word	0x431bde83
 8004c68:	10624dd3 	.word	0x10624dd3

08004c6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	817b      	strh	r3, [r7, #10]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	813b      	strh	r3, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c86:	f7fe fb87 	bl	8003398 <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	f040 80d9 	bne.w	8004e4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2319      	movs	r3, #25
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	496d      	ldr	r1, [pc, #436]	; (8004e58 <HAL_I2C_Mem_Write+0x1ec>)
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fc7f 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0cc      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2C_Mem_Write+0x56>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e0c5      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d007      	beq.n	8004ce8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2240      	movs	r2, #64	; 0x40
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a4d      	ldr	r2, [pc, #308]	; (8004e5c <HAL_I2C_Mem_Write+0x1f0>)
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d2a:	88f8      	ldrh	r0, [r7, #6]
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4603      	mov	r3, r0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fab6 	bl	80052ac <I2C_RequestMemoryWrite>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d052      	beq.n	8004dec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e081      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fd00 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d107      	bne.n	8004d72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e06b      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d11b      	bne.n	8004dec <HAL_I2C_Mem_Write+0x180>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d017      	beq.n	8004dec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1aa      	bne.n	8004d4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fcec 	bl	80057d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e016      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	00100002 	.word	0x00100002
 8004e5c:	ffff0000 	.word	0xffff0000

08004e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7a:	f7fe fa8d 	bl	8003398 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 8208 	bne.w	800529e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2319      	movs	r3, #25
 8004e94:	2201      	movs	r2, #1
 8004e96:	497b      	ldr	r1, [pc, #492]	; (8005084 <HAL_I2C_Mem_Read+0x224>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fb85 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e1fb      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Read+0x56>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e1f4      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d007      	beq.n	8004edc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2222      	movs	r2, #34	; 0x22
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a5b      	ldr	r2, [pc, #364]	; (8005088 <HAL_I2C_Mem_Read+0x228>)
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1e:	88f8      	ldrh	r0, [r7, #6]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	8979      	ldrh	r1, [r7, #10]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fa52 	bl	80053d8 <I2C_RequestMemoryRead>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1b0      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d113      	bne.n	8004f6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	623b      	str	r3, [r7, #32]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	623b      	str	r3, [r7, #32]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e184      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d11b      	bne.n	8004fae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e164      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d11b      	bne.n	8004fee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	e144      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005004:	e138      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	2b03      	cmp	r3, #3
 800500c:	f200 80f1 	bhi.w	80051f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	2b01      	cmp	r3, #1
 8005016:	d123      	bne.n	8005060 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fc1b 	bl	8005858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e139      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800505e:	e10b      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	2b02      	cmp	r3, #2
 8005066:	d14e      	bne.n	8005106 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	2200      	movs	r2, #0
 8005070:	4906      	ldr	r1, [pc, #24]	; (800508c <HAL_I2C_Mem_Read+0x22c>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fa98 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e10e      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
 8005082:	bf00      	nop
 8005084:	00100002 	.word	0x00100002
 8005088:	ffff0000 	.word	0xffff0000
 800508c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005104:	e0b8      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2200      	movs	r2, #0
 800510e:	4966      	ldr	r1, [pc, #408]	; (80052a8 <HAL_I2C_Mem_Read+0x448>)
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fa49 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0bf      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	2200      	movs	r2, #0
 800516a:	494f      	ldr	r1, [pc, #316]	; (80052a8 <HAL_I2C_Mem_Read+0x448>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fa1b 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e091      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f0:	e042      	b.n	8005278 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fb2e 	bl	8005858 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e04c      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d118      	bne.n	8005278 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f aec2 	bne.w	8005006 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3728      	adds	r7, #40	; 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	00010004 	.word	0x00010004

080052ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f960 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d103      	bne.n	8005306 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e05f      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	492d      	ldr	r1, [pc, #180]	; (80053d4 <I2C_RequestMemoryWrite+0x128>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f998 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e04c      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa02 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e02b      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e021      	b.n	80053c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f9dc 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e005      	b.n	80053ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	00010002 	.word	0x00010002

080053d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005400:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2200      	movs	r2, #0
 800541a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f8c2 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005438:	d103      	bne.n	8005442 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0aa      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	4952      	ldr	r1, [pc, #328]	; (80055a4 <I2C_RequestMemoryRead+0x1cc>)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f8fa 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e097      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f964 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e076      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]
 80054be:	e021      	b.n	8005504 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c0:	893b      	ldrh	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	6a39      	ldr	r1, [r7, #32]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f93e 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e050      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fa:	893b      	ldrh	r3, [r7, #8]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	6a39      	ldr	r1, [r7, #32]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f923 	bl	8005754 <I2C_WaitOnTXEFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b04      	cmp	r3, #4
 800551a:	d107      	bne.n	800552c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e035      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2200      	movs	r2, #0
 8005548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f82b 	bl	80055a8 <I2C_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d103      	bne.n	8005570 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e013      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005574:	897b      	ldrh	r3, [r7, #10]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	4906      	ldr	r1, [pc, #24]	; (80055a4 <I2C_RequestMemoryRead+0x1cc>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f863 	bl	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	00010002 	.word	0x00010002

080055a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b8:	e025      	b.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d021      	beq.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fd fee9 	bl	8003398 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d116      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e023      	b.n	800564e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	e00c      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2300      	movne	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	429a      	cmp	r2, r3
 800564a:	d0b6      	beq.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005664:	e051      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d123      	bne.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800568e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e046      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d021      	beq.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fd fe67 	bl	8003398 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e020      	b.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10c      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00b      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d18d      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005760:	e02d      	b.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f8ce 	bl	8005904 <I2C_IsAcknowledgeFailed>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e02d      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d021      	beq.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fd fe0d 	bl	8003398 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e007      	b.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d1ca      	bne.n	8005762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e2:	e02d      	b.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f88d 	bl	8005904 <I2C_IsAcknowledgeFailed>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e02d      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d021      	beq.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fd fdcc 	bl	8003398 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d116      	bne.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e007      	b.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d1ca      	bne.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005864:	e042      	b.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d119      	bne.n	80058a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e029      	b.n	80058fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a8:	f7fd fd76 	bl	8003398 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d1b5      	bne.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d11b      	bne.n	8005954 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005924:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0204 	orr.w	r2, r3, #4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e267      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d075      	beq.n	8005a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005982:	4b88      	ldr	r3, [pc, #544]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b04      	cmp	r3, #4
 800598c:	d00c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598e:	4b85      	ldr	r3, [pc, #532]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005996:	2b08      	cmp	r3, #8
 8005998:	d112      	bne.n	80059c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800599a:	4b82      	ldr	r3, [pc, #520]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a6:	d10b      	bne.n	80059c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a8:	4b7e      	ldr	r3, [pc, #504]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d05b      	beq.n	8005a6c <HAL_RCC_OscConfig+0x108>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d157      	bne.n	8005a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e242      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d106      	bne.n	80059d8 <HAL_RCC_OscConfig+0x74>
 80059ca:	4b76      	ldr	r3, [pc, #472]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a75      	ldr	r2, [pc, #468]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e01d      	b.n	8005a14 <HAL_RCC_OscConfig+0xb0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e0:	d10c      	bne.n	80059fc <HAL_RCC_OscConfig+0x98>
 80059e2:	4b70      	ldr	r3, [pc, #448]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6f      	ldr	r2, [pc, #444]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b6d      	ldr	r3, [pc, #436]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a6c      	ldr	r2, [pc, #432]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e00b      	b.n	8005a14 <HAL_RCC_OscConfig+0xb0>
 80059fc:	4b69      	ldr	r3, [pc, #420]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a68      	ldr	r2, [pc, #416]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4b66      	ldr	r3, [pc, #408]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a65      	ldr	r2, [pc, #404]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d013      	beq.n	8005a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1c:	f7fd fcbc 	bl	8003398 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fd fcb8 	bl	8003398 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e207      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a36:	4b5b      	ldr	r3, [pc, #364]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0xc0>
 8005a42:	e014      	b.n	8005a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd fca8 	bl	8003398 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fd fca4 	bl	8003398 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e1f3      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5e:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0xe8>
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d063      	beq.n	8005b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a86:	4b47      	ldr	r3, [pc, #284]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d11c      	bne.n	8005acc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a92:	4b44      	ldr	r3, [pc, #272]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d116      	bne.n	8005acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9e:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x152>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e1c7      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab6:	4b3b      	ldr	r3, [pc, #236]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4937      	ldr	r1, [pc, #220]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aca:	e03a      	b.n	8005b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d020      	beq.n	8005b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad4:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCC_OscConfig+0x244>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ada:	f7fd fc5d 	bl	8003398 <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae2:	f7fd fc59 	bl	8003398 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e1a8      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b00:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4925      	ldr	r1, [pc, #148]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	600b      	str	r3, [r1, #0]
 8005b14:	e015      	b.n	8005b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCC_OscConfig+0x244>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fc3c 	bl	8003398 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b24:	f7fd fc38 	bl	8003398 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e187      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d036      	beq.n	8005bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d016      	beq.n	8005b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b56:	4b15      	ldr	r3, [pc, #84]	; (8005bac <HAL_RCC_OscConfig+0x248>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5c:	f7fd fc1c 	bl	8003398 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b64:	f7fd fc18 	bl	8003398 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e167      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_OscConfig+0x240>)
 8005b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x200>
 8005b82:	e01b      	b.n	8005bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_OscConfig+0x248>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8a:	f7fd fc05 	bl	8003398 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b90:	e00e      	b.n	8005bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b92:	f7fd fc01 	bl	8003398 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d907      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e150      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	42470000 	.word	0x42470000
 8005bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb0:	4b88      	ldr	r3, [pc, #544]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ea      	bne.n	8005b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8097 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bce:	4b81      	ldr	r3, [pc, #516]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	4b7d      	ldr	r3, [pc, #500]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	4a7c      	ldr	r2, [pc, #496]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bea:	4b7a      	ldr	r3, [pc, #488]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfa:	4b77      	ldr	r3, [pc, #476]	; (8005dd8 <HAL_RCC_OscConfig+0x474>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d118      	bne.n	8005c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c06:	4b74      	ldr	r3, [pc, #464]	; (8005dd8 <HAL_RCC_OscConfig+0x474>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a73      	ldr	r2, [pc, #460]	; (8005dd8 <HAL_RCC_OscConfig+0x474>)
 8005c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c12:	f7fd fbc1 	bl	8003398 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1a:	f7fd fbbd 	bl	8003398 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e10c      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	4b6a      	ldr	r3, [pc, #424]	; (8005dd8 <HAL_RCC_OscConfig+0x474>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f0      	beq.n	8005c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCC_OscConfig+0x2ea>
 8005c40:	4b64      	ldr	r3, [pc, #400]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a63      	ldr	r2, [pc, #396]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	e01c      	b.n	8005c88 <HAL_RCC_OscConfig+0x324>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	d10c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x30c>
 8005c56:	4b5f      	ldr	r3, [pc, #380]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	4a5e      	ldr	r2, [pc, #376]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	f043 0304 	orr.w	r3, r3, #4
 8005c60:	6713      	str	r3, [r2, #112]	; 0x70
 8005c62:	4b5c      	ldr	r3, [pc, #368]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	4a5b      	ldr	r2, [pc, #364]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCC_OscConfig+0x324>
 8005c70:	4b58      	ldr	r3, [pc, #352]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	4a57      	ldr	r2, [pc, #348]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c7c:	4b55      	ldr	r3, [pc, #340]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	4a54      	ldr	r2, [pc, #336]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005c82:	f023 0304 	bic.w	r3, r3, #4
 8005c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fd fb82 	bl	8003398 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fd fb7e 	bl	8003398 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0cb      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cae:	4b49      	ldr	r3, [pc, #292]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0ee      	beq.n	8005c98 <HAL_RCC_OscConfig+0x334>
 8005cba:	e014      	b.n	8005ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cbc:	f7fd fb6c 	bl	8003398 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc2:	e00a      	b.n	8005cda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc4:	f7fd fb68 	bl	8003398 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e0b5      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cda:	4b3e      	ldr	r3, [pc, #248]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ee      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cec:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	4a38      	ldr	r2, [pc, #224]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80a1 	beq.w	8005e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d05c      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d141      	bne.n	8005d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d16:	4b31      	ldr	r3, [pc, #196]	; (8005ddc <HAL_RCC_OscConfig+0x478>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd fb3c 	bl	8003398 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fd fb38 	bl	8003398 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e087      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	019b      	lsls	r3, r3, #6
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	061b      	lsls	r3, r3, #24
 8005d66:	491b      	ldr	r1, [pc, #108]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <HAL_RCC_OscConfig+0x478>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d72:	f7fd fb11 	bl	8003398 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7a:	f7fd fb0d 	bl	8003398 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e05c      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x416>
 8005d98:	e054      	b.n	8005e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9a:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <HAL_RCC_OscConfig+0x478>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da0:	f7fd fafa 	bl	8003398 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fd faf6 	bl	8003398 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e045      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0x444>
 8005dc6:	e03d      	b.n	8005e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e038      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x4ec>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d028      	beq.n	8005e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d121      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d11a      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e10:	4013      	ands	r3, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800

08005e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0cc      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e68:	4b68      	ldr	r3, [pc, #416]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90c      	bls.n	8005e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e76:	4b65      	ldr	r3, [pc, #404]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b63      	ldr	r3, [pc, #396]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0b8      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d020      	beq.n	8005ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea8:	4b59      	ldr	r3, [pc, #356]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4a58      	ldr	r2, [pc, #352]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec0:	4b53      	ldr	r3, [pc, #332]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	4a52      	ldr	r2, [pc, #328]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ecc:	4b50      	ldr	r3, [pc, #320]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	494d      	ldr	r1, [pc, #308]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d044      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d107      	bne.n	8005f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d119      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e07f      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d003      	beq.n	8005f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d107      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f12:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e06f      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f22:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e067      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f32:	4b37      	ldr	r3, [pc, #220]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f023 0203 	bic.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4934      	ldr	r1, [pc, #208]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f44:	f7fd fa28 	bl	8003398 <HAL_GetTick>
 8005f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	e00a      	b.n	8005f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f4c:	f7fd fa24 	bl	8003398 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e04f      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f62:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 020c 	and.w	r2, r3, #12
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d1eb      	bne.n	8005f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f74:	4b25      	ldr	r3, [pc, #148]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d20c      	bcs.n	8005f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f82:	4b22      	ldr	r3, [pc, #136]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b20      	ldr	r3, [pc, #128]	; (800600c <HAL_RCC_ClockConfig+0x1b8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e032      	b.n	8006002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa8:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4916      	ldr	r1, [pc, #88]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	490e      	ldr	r1, [pc, #56]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fda:	f000 f821 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	490a      	ldr	r1, [pc, #40]	; (8006014 <HAL_RCC_ClockConfig+0x1c0>)
 8005fec:	5ccb      	ldrb	r3, [r1, r3]
 8005fee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff2:	4a09      	ldr	r2, [pc, #36]	; (8006018 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <HAL_RCC_ClockConfig+0x1c8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd f988 	bl	8003310 <HAL_InitTick>

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40023c00 	.word	0x40023c00
 8006010:	40023800 	.word	0x40023800
 8006014:	0800cb1c 	.word	0x0800cb1c
 8006018:	20000010 	.word	0x20000010
 800601c:	20000014 	.word	0x20000014

08006020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006024:	b094      	sub	sp, #80	; 0x50
 8006026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
 800602c:	2300      	movs	r3, #0
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006030:	2300      	movs	r3, #0
 8006032:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006038:	4b79      	ldr	r3, [pc, #484]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 030c 	and.w	r3, r3, #12
 8006040:	2b08      	cmp	r3, #8
 8006042:	d00d      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0x40>
 8006044:	2b08      	cmp	r3, #8
 8006046:	f200 80e1 	bhi.w	800620c <HAL_RCC_GetSysClockFreq+0x1ec>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x34>
 800604e:	2b04      	cmp	r3, #4
 8006050:	d003      	beq.n	800605a <HAL_RCC_GetSysClockFreq+0x3a>
 8006052:	e0db      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006054:	4b73      	ldr	r3, [pc, #460]	; (8006224 <HAL_RCC_GetSysClockFreq+0x204>)
 8006056:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006058:	e0db      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800605a:	4b73      	ldr	r3, [pc, #460]	; (8006228 <HAL_RCC_GetSysClockFreq+0x208>)
 800605c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800605e:	e0d8      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006060:	4b6f      	ldr	r3, [pc, #444]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800606a:	4b6d      	ldr	r3, [pc, #436]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d063      	beq.n	800613e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006076:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	099b      	lsrs	r3, r3, #6
 800607c:	2200      	movs	r2, #0
 800607e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006080:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006088:	633b      	str	r3, [r7, #48]	; 0x30
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
 800608e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	f04f 0000 	mov.w	r0, #0
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	0159      	lsls	r1, r3, #5
 80060a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a4:	0150      	lsls	r0, r2, #5
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4621      	mov	r1, r4
 80060ac:	1a51      	subs	r1, r2, r1
 80060ae:	6139      	str	r1, [r7, #16]
 80060b0:	4629      	mov	r1, r5
 80060b2:	eb63 0301 	sbc.w	r3, r3, r1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060c4:	4659      	mov	r1, fp
 80060c6:	018b      	lsls	r3, r1, #6
 80060c8:	4651      	mov	r1, sl
 80060ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060ce:	4651      	mov	r1, sl
 80060d0:	018a      	lsls	r2, r1, #6
 80060d2:	4651      	mov	r1, sl
 80060d4:	ebb2 0801 	subs.w	r8, r2, r1
 80060d8:	4659      	mov	r1, fp
 80060da:	eb63 0901 	sbc.w	r9, r3, r1
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060f2:	4690      	mov	r8, r2
 80060f4:	4699      	mov	r9, r3
 80060f6:	4623      	mov	r3, r4
 80060f8:	eb18 0303 	adds.w	r3, r8, r3
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	462b      	mov	r3, r5
 8006100:	eb49 0303 	adc.w	r3, r9, r3
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006112:	4629      	mov	r1, r5
 8006114:	024b      	lsls	r3, r1, #9
 8006116:	4621      	mov	r1, r4
 8006118:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800611c:	4621      	mov	r1, r4
 800611e:	024a      	lsls	r2, r1, #9
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	2200      	movs	r2, #0
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
 800612a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800612c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006130:	f7fa fcbc 	bl	8000aac <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4613      	mov	r3, r2
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800613c:	e058      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613e:	4b38      	ldr	r3, [pc, #224]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	2200      	movs	r2, #0
 8006146:	4618      	mov	r0, r3
 8006148:	4611      	mov	r1, r2
 800614a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	2300      	movs	r3, #0
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
 8006154:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	f04f 0000 	mov.w	r0, #0
 8006160:	f04f 0100 	mov.w	r1, #0
 8006164:	0159      	lsls	r1, r3, #5
 8006166:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800616a:	0150      	lsls	r0, r2, #5
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4641      	mov	r1, r8
 8006172:	ebb2 0a01 	subs.w	sl, r2, r1
 8006176:	4649      	mov	r1, r9
 8006178:	eb63 0b01 	sbc.w	fp, r3, r1
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006188:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800618c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006190:	ebb2 040a 	subs.w	r4, r2, sl
 8006194:	eb63 050b 	sbc.w	r5, r3, fp
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	00eb      	lsls	r3, r5, #3
 80061a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a6:	00e2      	lsls	r2, r4, #3
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	18e3      	adds	r3, r4, r3
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	464b      	mov	r3, r9
 80061b4:	eb45 0303 	adc.w	r3, r5, r3
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c6:	4629      	mov	r1, r5
 80061c8:	028b      	lsls	r3, r1, #10
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061d0:	4621      	mov	r1, r4
 80061d2:	028a      	lsls	r2, r1, #10
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061da:	2200      	movs	r2, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	61fa      	str	r2, [r7, #28]
 80061e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e4:	f7fa fc62 	bl	8000aac <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4613      	mov	r3, r2
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_GetSysClockFreq+0x200>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	3301      	adds	r3, #1
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800620a:	e002      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetSysClockFreq+0x204>)
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006214:	4618      	mov	r0, r3
 8006216:	3750      	adds	r7, #80	; 0x50
 8006218:	46bd      	mov	sp, r7
 800621a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621e:	bf00      	nop
 8006220:	40023800 	.word	0x40023800
 8006224:	00f42400 	.word	0x00f42400
 8006228:	007a1200 	.word	0x007a1200

0800622c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_RCC_GetHCLKFreq+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000010 	.word	0x20000010

08006244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006248:	f7ff fff0 	bl	800622c <HAL_RCC_GetHCLKFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	0a9b      	lsrs	r3, r3, #10
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4903      	ldr	r1, [pc, #12]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800625a:	5ccb      	ldrb	r3, [r1, r3]
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40023800 	.word	0x40023800
 8006268:	0800cb2c 	.word	0x0800cb2c

0800626c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006270:	f7ff ffdc 	bl	800622c <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0b5b      	lsrs	r3, r3, #13
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4903      	ldr	r1, [pc, #12]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	0800cb2c 	.word	0x0800cb2c

08006294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07b      	b.n	800639e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b6:	d009      	beq.n	80062cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
 80062be:	e005      	b.n	80062cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc fc4a 	bl	8002b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	ea42 0103 	orr.w	r1, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0104 	and.w	r1, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	f003 0210 	and.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b088      	sub	sp, #32
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_SPI_Transmit+0x22>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e126      	b.n	8006616 <HAL_SPI_Transmit+0x270>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d0:	f7fc ffe2 	bl	8003398 <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ea:	e10b      	b.n	8006604 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Transmit+0x52>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063fc:	e102      	b.n	8006604 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2203      	movs	r2, #3
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d10f      	bne.n	8006466 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006464:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d007      	beq.n	8006484 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648c:	d14b      	bne.n	8006526 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_SPI_Transmit+0xf6>
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d13e      	bne.n	800651a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064c0:	e02b      	b.n	800651a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d112      	bne.n	80064f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064f4:	e011      	b.n	800651a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f6:	f7fc ff4f 	bl	8003398 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <HAL_SPI_Transmit+0x168>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <HAL_SPI_Transmit+0x16e>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006518:	e074      	b.n	8006604 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1ce      	bne.n	80064c2 <HAL_SPI_Transmit+0x11c>
 8006524:	e04c      	b.n	80065c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_SPI_Transmit+0x18e>
 800652e:	8afb      	ldrh	r3, [r7, #22]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d140      	bne.n	80065b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800655a:	e02c      	b.n	80065b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d113      	bne.n	8006592 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006590:	e011      	b.n	80065b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006592:	f7fc ff01 	bl	8003398 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d803      	bhi.n	80065aa <HAL_SPI_Transmit+0x204>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d102      	bne.n	80065b0 <HAL_SPI_Transmit+0x20a>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065b4:	e026      	b.n	8006604 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1cd      	bne.n	800655c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fbcb 	bl	8006d60 <SPI_EndRxTxTransaction>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e000      	b.n	8006604 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006602:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006614:	7ffb      	ldrb	r3, [r7, #31]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b088      	sub	sp, #32
 8006622:	af02      	add	r7, sp, #8
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663a:	d112      	bne.n	8006662 <HAL_SPI_Receive+0x44>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10e      	bne.n	8006662 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2204      	movs	r2, #4
 8006648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f8f1 	bl	8006840 <HAL_SPI_TransmitReceive>
 800665e:	4603      	mov	r3, r0
 8006660:	e0ea      	b.n	8006838 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_SPI_Receive+0x52>
 800666c:	2302      	movs	r3, #2
 800666e:	e0e3      	b.n	8006838 <HAL_SPI_Receive+0x21a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006678:	f7fc fe8e 	bl	8003398 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b01      	cmp	r3, #1
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800668a:	2302      	movs	r3, #2
 800668c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800668e:	e0ca      	b.n	8006826 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_SPI_Receive+0x7e>
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80066a0:	e0c1      	b.n	8006826 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2204      	movs	r2, #4
 80066a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e8:	d10f      	bne.n	800670a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006708:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d007      	beq.n	8006728 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006726:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d162      	bne.n	80067f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006730:	e02e      	b.n	8006790 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d115      	bne.n	800676c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f103 020c 	add.w	r2, r3, #12
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800676a:	e011      	b.n	8006790 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800676c:	f7fc fe14 	bl	8003398 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d803      	bhi.n	8006784 <HAL_SPI_Receive+0x166>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d102      	bne.n	800678a <HAL_SPI_Receive+0x16c>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800678e:	e04a      	b.n	8006826 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1cb      	bne.n	8006732 <HAL_SPI_Receive+0x114>
 800679a:	e031      	b.n	8006800 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d113      	bne.n	80067d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	b292      	uxth	r2, r2
 80067b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067d0:	e011      	b.n	80067f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d2:	f7fc fde1 	bl	8003398 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d803      	bhi.n	80067ea <HAL_SPI_Receive+0x1cc>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d102      	bne.n	80067f0 <HAL_SPI_Receive+0x1d2>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067f4:	e017      	b.n	8006826 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1cd      	bne.n	800679c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fa45 	bl	8006c94 <SPI_EndRxTransaction>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
 8006822:	e000      	b.n	8006826 <HAL_SPI_Receive+0x208>
  }

error :
 8006824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006836:	7dfb      	ldrb	r3, [r7, #23]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800684e:	2301      	movs	r3, #1
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_SPI_TransmitReceive+0x26>
 8006862:	2302      	movs	r3, #2
 8006864:	e18a      	b.n	8006b7c <HAL_SPI_TransmitReceive+0x33c>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800686e:	f7fc fd93 	bl	8003398 <HAL_GetTick>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006884:	887b      	ldrh	r3, [r7, #2]
 8006886:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800688c:	2b01      	cmp	r3, #1
 800688e:	d00f      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x70>
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006896:	d107      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x68>
 80068a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d003      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068ae:	e15b      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_SPI_TransmitReceive+0x82>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_SPI_TransmitReceive+0x82>
 80068bc:	887b      	ldrh	r3, [r7, #2]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068c8:	e14e      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d003      	beq.n	80068de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2205      	movs	r2, #5
 80068da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	887a      	ldrh	r2, [r7, #2]
 80068ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	887a      	ldrh	r2, [r7, #2]
 80068f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	887a      	ldrh	r2, [r7, #2]
 8006900:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	887a      	ldrh	r2, [r7, #2]
 8006906:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d007      	beq.n	8006932 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693a:	d178      	bne.n	8006a2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_TransmitReceive+0x10a>
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d166      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696e:	e053      	b.n	8006a18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b02      	cmp	r3, #2
 800697c:	d11b      	bne.n	80069b6 <HAL_SPI_TransmitReceive+0x176>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <HAL_SPI_TransmitReceive+0x176>
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d113      	bne.n	80069b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	1c9a      	adds	r2, r3, #2
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d119      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x1b8>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d014      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	b292      	uxth	r2, r2
 80069da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	1c9a      	adds	r2, r3, #2
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f4:	2301      	movs	r3, #1
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069f8:	f7fc fcce 	bl	8003398 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d807      	bhi.n	8006a18 <HAL_SPI_TransmitReceive+0x1d8>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d003      	beq.n	8006a18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a16:	e0a7      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1a6      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x130>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1a1      	bne.n	8006970 <HAL_SPI_TransmitReceive+0x130>
 8006a2c:	e07c      	b.n	8006b28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_SPI_TransmitReceive+0x1fc>
 8006a36:	8b7b      	ldrh	r3, [r7, #26]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d16b      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a62:	e057      	b.n	8006b14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d11c      	bne.n	8006aac <HAL_SPI_TransmitReceive+0x26c>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d017      	beq.n	8006aac <HAL_SPI_TransmitReceive+0x26c>
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d114      	bne.n	8006aac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	7812      	ldrb	r2, [r2, #0]
 8006a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d119      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x2ae>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d014      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aee:	f7fc fc53 	bl	8003398 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d803      	bhi.n	8006b06 <HAL_SPI_TransmitReceive+0x2c6>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d102      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x2cc>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b12:	e029      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1a2      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x224>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d19d      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f917 	bl	8006d60 <SPI_EndRxTxTransaction>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b44:	e010      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	e000      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3730      	adds	r7, #48	; 0x30
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b94:	f7fc fc00 	bl	8003398 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ba4:	f7fc fbf8 	bl	8003398 <HAL_GetTick>
 8006ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	015b      	lsls	r3, r3, #5
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bba:	e054      	b.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d050      	beq.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc4:	f7fc fbe8 	bl	8003398 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d902      	bls.n	8006bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13d      	bne.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf2:	d111      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d004      	beq.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c06:	d107      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c20:	d10f      	bne.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e017      	b.n	8006c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	bf0c      	ite	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	2300      	movne	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d19b      	bne.n	8006bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000010 	.word	0x20000010

08006c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca8:	d111      	bne.n	8006cce <SPI_EndRxTransaction+0x3a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	d004      	beq.n	8006cbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbc:	d107      	bne.n	8006cce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd6:	d12a      	bne.n	8006d2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d012      	beq.n	8006d08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2180      	movs	r1, #128	; 0x80
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff ff49 	bl	8006b84 <SPI_WaitFlagStateUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d02d      	beq.n	8006d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e026      	b.n	8006d56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2101      	movs	r1, #1
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff ff36 	bl	8006b84 <SPI_WaitFlagStateUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01a      	beq.n	8006d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e013      	b.n	8006d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2101      	movs	r1, #1
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff ff23 	bl	8006b84 <SPI_WaitFlagStateUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f043 0220 	orr.w	r2, r3, #32
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e000      	b.n	8006d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <SPI_EndRxTxTransaction+0x7c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <SPI_EndRxTxTransaction+0x80>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	0d5b      	lsrs	r3, r3, #21
 8006d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8a:	d112      	bne.n	8006db2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	2180      	movs	r1, #128	; 0x80
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fef4 	bl	8006b84 <SPI_WaitFlagStateUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d016      	beq.n	8006dd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f043 0220 	orr.w	r2, r3, #32
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00f      	b.n	8006dd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc8:	2b80      	cmp	r3, #128	; 0x80
 8006dca:	d0f2      	beq.n	8006db2 <SPI_EndRxTxTransaction+0x52>
 8006dcc:	e000      	b.n	8006dd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dce:	bf00      	nop
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000010 	.word	0x20000010
 8006de0:	165e9f81 	.word	0x165e9f81

08006de4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e038      	b.n	8006e6c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7fa faf2 	bl	80013f8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f002 f8dc 	bl	8008fdc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	f002 f93e 	bl	80090b0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6858      	ldr	r0, [r3, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	f002 f96b 	bl	800911c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	6892      	ldr	r2, [r2, #8]
 8006e4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6892      	ldr	r2, [r2, #8]
 8006e5a:	f041 0101 	orr.w	r1, r1, #1
 8006e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e041      	b.n	8006f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fc f80a 	bl	8002eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 fc7a 	bl	80077ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e04e      	b.n	8006fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a23      	ldr	r2, [pc, #140]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d01d      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1f      	ldr	r2, [pc, #124]	; (8006fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <HAL_TIM_Base_Start_IT+0xd8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d111      	bne.n	8006fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d010      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	e007      	b.n	8006fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40001800 	.word	0x40001800

08006ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e041      	b.n	800708a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f839 	bl	8007092 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f000 fbba 	bl	80077ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d109      	bne.n	80070cc <HAL_TIM_PWM_Start+0x24>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	bf14      	ite	ne
 80070c4:	2301      	movne	r3, #1
 80070c6:	2300      	moveq	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	e022      	b.n	8007112 <HAL_TIM_PWM_Start+0x6a>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d109      	bne.n	80070e6 <HAL_TIM_PWM_Start+0x3e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	bf14      	ite	ne
 80070de:	2301      	movne	r3, #1
 80070e0:	2300      	moveq	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	e015      	b.n	8007112 <HAL_TIM_PWM_Start+0x6a>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d109      	bne.n	8007100 <HAL_TIM_PWM_Start+0x58>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	bf14      	ite	ne
 80070f8:	2301      	movne	r3, #1
 80070fa:	2300      	moveq	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	e008      	b.n	8007112 <HAL_TIM_PWM_Start+0x6a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e07c      	b.n	8007214 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0x82>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007128:	e013      	b.n	8007152 <HAL_TIM_PWM_Start+0xaa>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d104      	bne.n	800713a <HAL_TIM_PWM_Start+0x92>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007138:	e00b      	b.n	8007152 <HAL_TIM_PWM_Start+0xaa>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d104      	bne.n	800714a <HAL_TIM_PWM_Start+0xa2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007148:	e003      	b.n	8007152 <HAL_TIM_PWM_Start+0xaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2201      	movs	r2, #1
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fe10 	bl	8007d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2d      	ldr	r2, [pc, #180]	; (800721c <HAL_TIM_PWM_Start+0x174>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIM_PWM_Start+0xcc>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <HAL_TIM_PWM_Start+0x178>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d101      	bne.n	8007178 <HAL_TIM_PWM_Start+0xd0>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <HAL_TIM_PWM_Start+0xd2>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800718c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a22      	ldr	r2, [pc, #136]	; (800721c <HAL_TIM_PWM_Start+0x174>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d022      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a0:	d01d      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <HAL_TIM_PWM_Start+0x17c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d018      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <HAL_TIM_PWM_Start+0x180>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1c      	ldr	r2, [pc, #112]	; (800722c <HAL_TIM_PWM_Start+0x184>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <HAL_TIM_PWM_Start+0x178>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a18      	ldr	r2, [pc, #96]	; (8007230 <HAL_TIM_PWM_Start+0x188>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_TIM_PWM_Start+0x136>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a16      	ldr	r2, [pc, #88]	; (8007234 <HAL_TIM_PWM_Start+0x18c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d111      	bne.n	8007202 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d010      	beq.n	8007212 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007200:	e007      	b.n	8007212 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40010000 	.word	0x40010000
 8007220:	40010400 	.word	0x40010400
 8007224:	40000400 	.word	0x40000400
 8007228:	40000800 	.word	0x40000800
 800722c:	40000c00 	.word	0x40000c00
 8007230:	40014000 	.word	0x40014000
 8007234:	40001800 	.word	0x40001800

08007238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d122      	bne.n	8007294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b02      	cmp	r3, #2
 800725a:	d11b      	bne.n	8007294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0202 	mvn.w	r2, #2
 8007264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa77 	bl	800776e <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa69 	bl	800775a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa7a 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0304 	and.w	r3, r3, #4
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d122      	bne.n	80072e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d11b      	bne.n	80072e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0204 	mvn.w	r2, #4
 80072b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa4d 	bl	800776e <HAL_TIM_IC_CaptureCallback>
 80072d4:	e005      	b.n	80072e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa3f 	bl	800775a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa50 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d122      	bne.n	800733c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b08      	cmp	r3, #8
 8007302:	d11b      	bne.n	800733c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0208 	mvn.w	r2, #8
 800730c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa23 	bl	800776e <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa15 	bl	800775a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa26 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	2b10      	cmp	r3, #16
 8007348:	d122      	bne.n	8007390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b10      	cmp	r3, #16
 8007356:	d11b      	bne.n	8007390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0210 	mvn.w	r2, #16
 8007360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2208      	movs	r2, #8
 8007366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9f9 	bl	800776e <HAL_TIM_IC_CaptureCallback>
 800737c:	e005      	b.n	800738a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9eb 	bl	800775a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9fc 	bl	8007782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0201 	mvn.w	r2, #1
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fb fb82 	bl	8002ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d10e      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fd78 	bl	8007ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d10e      	bne.n	8007414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d107      	bne.n	8007414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9c1 	bl	8007796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b20      	cmp	r3, #32
 8007420:	d10e      	bne.n	8007440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d107      	bne.n	8007440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0220 	mvn.w	r2, #32
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fd42 	bl	8007ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007462:	2302      	movs	r3, #2
 8007464:	e0ae      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b0c      	cmp	r3, #12
 8007472:	f200 809f 	bhi.w	80075b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074b1 	.word	0x080074b1
 8007480:	080075b5 	.word	0x080075b5
 8007484:	080075b5 	.word	0x080075b5
 8007488:	080075b5 	.word	0x080075b5
 800748c:	080074f1 	.word	0x080074f1
 8007490:	080075b5 	.word	0x080075b5
 8007494:	080075b5 	.word	0x080075b5
 8007498:	080075b5 	.word	0x080075b5
 800749c:	08007533 	.word	0x08007533
 80074a0:	080075b5 	.word	0x080075b5
 80074a4:	080075b5 	.word	0x080075b5
 80074a8:	080075b5 	.word	0x080075b5
 80074ac:	08007573 	.word	0x08007573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fa18 	bl	80078ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0208 	orr.w	r2, r2, #8
 80074ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0204 	bic.w	r2, r2, #4
 80074da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6999      	ldr	r1, [r3, #24]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	619a      	str	r2, [r3, #24]
      break;
 80074ee:	e064      	b.n	80075ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fa68 	bl	80079cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6999      	ldr	r1, [r3, #24]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	021a      	lsls	r2, r3, #8
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	619a      	str	r2, [r3, #24]
      break;
 8007530:	e043      	b.n	80075ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fabd 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0208 	orr.w	r2, r2, #8
 800754c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0204 	bic.w	r2, r2, #4
 800755c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69d9      	ldr	r1, [r3, #28]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	61da      	str	r2, [r3, #28]
      break;
 8007570:	e023      	b.n	80075ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fb11 	bl	8007ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800758c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69d9      	ldr	r1, [r3, #28]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	021a      	lsls	r2, r3, #8
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	61da      	str	r2, [r3, #28]
      break;
 80075b2:	e002      	b.n	80075ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
      break;
 80075b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_TIM_ConfigClockSource+0x1c>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e0b4      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x186>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800760e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007620:	d03e      	beq.n	80076a0 <HAL_TIM_ConfigClockSource+0xd4>
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007626:	f200 8087 	bhi.w	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	f000 8086 	beq.w	800773e <HAL_TIM_ConfigClockSource+0x172>
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d87f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007638:	2b70      	cmp	r3, #112	; 0x70
 800763a:	d01a      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0xa6>
 800763c:	2b70      	cmp	r3, #112	; 0x70
 800763e:	d87b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007640:	2b60      	cmp	r3, #96	; 0x60
 8007642:	d050      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0x11a>
 8007644:	2b60      	cmp	r3, #96	; 0x60
 8007646:	d877      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d03c      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0xfa>
 800764c:	2b50      	cmp	r3, #80	; 0x50
 800764e:	d873      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d058      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x13a>
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d86f      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	d064      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x15a>
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d86b      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b20      	cmp	r3, #32
 8007662:	d060      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x15a>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d867      	bhi.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d05c      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x15a>
 800766c:	2b10      	cmp	r3, #16
 800766e:	d05a      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x15a>
 8007670:	e062      	b.n	8007738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	6899      	ldr	r1, [r3, #8]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f000 fb5d 	bl	8007d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	609a      	str	r2, [r3, #8]
      break;
 800769e:	e04f      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6899      	ldr	r1, [r3, #8]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f000 fb46 	bl	8007d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c2:	609a      	str	r2, [r3, #8]
      break;
 80076c4:	e03c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	6859      	ldr	r1, [r3, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f000 faba 	bl	8007c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2150      	movs	r1, #80	; 0x50
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fb13 	bl	8007d0a <TIM_ITRx_SetConfig>
      break;
 80076e4:	e02c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fad9 	bl	8007caa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2160      	movs	r1, #96	; 0x60
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fb03 	bl	8007d0a <TIM_ITRx_SetConfig>
      break;
 8007704:	e01c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fa9a 	bl	8007c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2140      	movs	r1, #64	; 0x40
 800771e:	4618      	mov	r0, r3
 8007720:	f000 faf3 	bl	8007d0a <TIM_ITRx_SetConfig>
      break;
 8007724:	e00c      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f000 faea 	bl	8007d0a <TIM_ITRx_SetConfig>
      break;
 8007736:	e003      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e000      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800773e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a40      	ldr	r2, [pc, #256]	; (80078c0 <TIM_Base_SetConfig+0x114>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ca:	d00f      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3d      	ldr	r2, [pc, #244]	; (80078c4 <TIM_Base_SetConfig+0x118>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00b      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3c      	ldr	r2, [pc, #240]	; (80078c8 <TIM_Base_SetConfig+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d007      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3b      	ldr	r2, [pc, #236]	; (80078cc <TIM_Base_SetConfig+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3a      	ldr	r2, [pc, #232]	; (80078d0 <TIM_Base_SetConfig+0x124>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d108      	bne.n	80077fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2f      	ldr	r2, [pc, #188]	; (80078c0 <TIM_Base_SetConfig+0x114>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d02b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d027      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2c      	ldr	r2, [pc, #176]	; (80078c4 <TIM_Base_SetConfig+0x118>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d023      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2b      	ldr	r2, [pc, #172]	; (80078c8 <TIM_Base_SetConfig+0x11c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01f      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2a      	ldr	r2, [pc, #168]	; (80078cc <TIM_Base_SetConfig+0x120>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a29      	ldr	r2, [pc, #164]	; (80078d0 <TIM_Base_SetConfig+0x124>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d017      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a28      	ldr	r2, [pc, #160]	; (80078d4 <TIM_Base_SetConfig+0x128>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a27      	ldr	r2, [pc, #156]	; (80078d8 <TIM_Base_SetConfig+0x12c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00f      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a26      	ldr	r2, [pc, #152]	; (80078dc <TIM_Base_SetConfig+0x130>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00b      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <TIM_Base_SetConfig+0x134>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d007      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a24      	ldr	r2, [pc, #144]	; (80078e4 <TIM_Base_SetConfig+0x138>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a23      	ldr	r2, [pc, #140]	; (80078e8 <TIM_Base_SetConfig+0x13c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d108      	bne.n	8007870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <TIM_Base_SetConfig+0x114>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d003      	beq.n	80078a4 <TIM_Base_SetConfig+0xf8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <TIM_Base_SetConfig+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d103      	bne.n	80078ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	615a      	str	r2, [r3, #20]
}
 80078b2:	bf00      	nop
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40000400 	.word	0x40000400
 80078c8:	40000800 	.word	0x40000800
 80078cc:	40000c00 	.word	0x40000c00
 80078d0:	40010400 	.word	0x40010400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800
 80078e0:	40001800 	.word	0x40001800
 80078e4:	40001c00 	.word	0x40001c00
 80078e8:	40002000 	.word	0x40002000

080078ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f023 0201 	bic.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0302 	bic.w	r3, r3, #2
 8007934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <TIM_OC1_SetConfig+0xd8>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_OC1_SetConfig+0x64>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <TIM_OC1_SetConfig+0xdc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10c      	bne.n	800796a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0308 	bic.w	r3, r3, #8
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 0304 	bic.w	r3, r3, #4
 8007968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <TIM_OC1_SetConfig+0xd8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_OC1_SetConfig+0x8e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a14      	ldr	r2, [pc, #80]	; (80079c8 <TIM_OC1_SetConfig+0xdc>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d111      	bne.n	800799e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	621a      	str	r2, [r3, #32]
}
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400

080079cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f023 0210 	bic.w	r2, r3, #16
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f023 0320 	bic.w	r3, r3, #32
 8007a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <TIM_OC2_SetConfig+0xe4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC2_SetConfig+0x68>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a21      	ldr	r2, [pc, #132]	; (8007ab4 <TIM_OC2_SetConfig+0xe8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10d      	bne.n	8007a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC2_SetConfig+0xe4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <TIM_OC2_SetConfig+0x94>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a16      	ldr	r2, [pc, #88]	; (8007ab4 <TIM_OC2_SetConfig+0xe8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d113      	bne.n	8007a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <TIM_OC3_SetConfig+0xe0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC3_SetConfig+0x66>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10d      	bne.n	8007b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <TIM_OC3_SetConfig+0xe0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC3_SetConfig+0x92>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d113      	bne.n	8007b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a12      	ldr	r2, [pc, #72]	; (8007c44 <TIM_OC4_SetConfig+0xa4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC4_SetConfig+0x68>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <TIM_OC4_SetConfig+0xa8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d109      	bne.n	8007c1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	019b      	lsls	r3, r3, #6
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400

08007c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f023 0201 	bic.w	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 030a 	bic.w	r3, r3, #10
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b087      	sub	sp, #28
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0210 	bic.w	r2, r3, #16
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	031b      	lsls	r3, r3, #12
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f043 0307 	orr.w	r3, r3, #7
 8007d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	609a      	str	r2, [r3, #8]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	021a      	lsls	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	609a      	str	r2, [r3, #8]
}
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f003 031f 	and.w	r3, r3, #31
 8007d92:	2201      	movs	r2, #1
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	fa01 f303 	lsl.w	r3, r1, r3
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e05a      	b.n	8007e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a21      	ldr	r2, [pc, #132]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e30:	d01d      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d018      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00e      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a17      	ldr	r2, [pc, #92]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d10c      	bne.n	8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40000c00 	.word	0x40000c00
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40001800 	.word	0x40001800

08007ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e03f      	b.n	8007f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fb f922 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	; 0x24
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fddf 	bl	8008af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b08a      	sub	sp, #40	; 0x28
 8007f8a:	af02      	add	r7, sp, #8
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d17c      	bne.n	80080a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_Transmit+0x2c>
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e075      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_UART_Transmit+0x3e>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e06e      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2221      	movs	r2, #33	; 0x21
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fda:	f7fb f9dd 	bl	8003398 <HAL_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff4:	d108      	bne.n	8008008 <HAL_UART_Transmit+0x82>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	e003      	b.n	8008010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008018:	e02a      	b.n	8008070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2200      	movs	r2, #0
 8008022:	2180      	movs	r1, #128	; 0x80
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fb1f 	bl	8008668 <UART_WaitOnFlagUntilTimeout>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e036      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	3302      	adds	r3, #2
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	e007      	b.n	8008062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	3301      	adds	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1cf      	bne.n	800801a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	2140      	movs	r1, #64	; 0x40
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 faef 	bl	8008668 <UART_WaitOnFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e006      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	e000      	b.n	80080a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d11d      	bne.n	8008100 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_UART_Receive_IT+0x26>
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e016      	b.n	8008102 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_UART_Receive_IT+0x38>
 80080de:	2302      	movs	r3, #2
 80080e0:	e00f      	b.n	8008102 <HAL_UART_Receive_IT+0x58>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	461a      	mov	r2, r3
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fb24 	bl	8008744 <UART_Start_Receive_IT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	e000      	b.n	8008102 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b0ba      	sub	sp, #232	; 0xe8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008138:	2300      	movs	r3, #0
 800813a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800814a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10f      	bne.n	8008172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <HAL_UART_IRQHandler+0x66>
 800815e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fc07 	bl	800897e <UART_Receive_IT>
      return;
 8008170:	e256      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80de 	beq.w	8008338 <HAL_UART_IRQHandler+0x22c>
 800817c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80d1 	beq.w	8008338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <HAL_UART_IRQHandler+0xae>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f043 0201 	orr.w	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <HAL_UART_IRQHandler+0xd2>
 80081c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f043 0202 	orr.w	r2, r3, #2
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_UART_IRQHandler+0xf6>
 80081ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f043 0204 	orr.w	r2, r3, #4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d011      	beq.n	8008232 <HAL_UART_IRQHandler+0x126>
 800820e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800821a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f043 0208 	orr.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 81ed 	beq.w	8008616 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d008      	beq.n	800825a <HAL_UART_IRQHandler+0x14e>
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb92 	bl	800897e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <HAL_UART_IRQHandler+0x17a>
 800827e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d04f      	beq.n	8008326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa9a 	bl	80087c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d141      	bne.n	800831e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3314      	adds	r3, #20
 80082c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d9      	bne.n	800829a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d013      	beq.n	8008316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	4a7d      	ldr	r2, [pc, #500]	; (80084e8 <HAL_UART_IRQHandler+0x3dc>)
 80082f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fb ff16 	bl	800412c <HAL_DMA_Abort_IT>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d016      	beq.n	8008334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e00e      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f990 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e00a      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f98c 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008324:	e006      	b.n	8008334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f988 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008332:	e170      	b.n	8008616 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	bf00      	nop
    return;
 8008336:	e16e      	b.n	8008616 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	f040 814a 	bne.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8143 	beq.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 813c 	beq.w	80085d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	f040 80b4 	bne.w	80084ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8140 	beq.w	800861a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800839e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a2:	429a      	cmp	r2, r3
 80083a4:	f080 8139 	bcs.w	800861a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	f000 8088 	beq.w	80084ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	330c      	adds	r3, #12
 80083c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1d9      	bne.n	80083be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800841a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800842e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008432:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e1      	bne.n	800840a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3314      	adds	r3, #20
 800844c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800846a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800846c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e3      	bne.n	8008446 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800849c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800849e:	f023 0310 	bic.w	r3, r3, #16
 80084a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e3      	bne.n	800848c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fb fdbf 	bl	800404c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8b6 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084e4:	e099      	b.n	800861a <HAL_UART_IRQHandler+0x50e>
 80084e6:	bf00      	nop
 80084e8:	08008887 	.word	0x08008887
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 808b 	beq.w	800861e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8086 	beq.w	800861e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	330c      	adds	r3, #12
 8008518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008536:	647a      	str	r2, [r7, #68]	; 0x44
 8008538:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800853c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e3      	bne.n	8008512 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	623b      	str	r3, [r7, #32]
   return(result);
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800856e:	633a      	str	r2, [r7, #48]	; 0x30
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e3      	bne.n	800854a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	330c      	adds	r3, #12
 80085b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085b4:	61fa      	str	r2, [r7, #28]
 80085b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	69b9      	ldr	r1, [r7, #24]
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	617b      	str	r3, [r7, #20]
   return(result);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e3      	bne.n	8008590 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f83e 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085d4:	e023      	b.n	800861e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4ea>
 80085e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f95d 	bl	80088ae <UART_Transmit_IT>
    return;
 80085f4:	e014      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00e      	beq.n	8008620 <HAL_UART_IRQHandler+0x514>
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d008      	beq.n	8008620 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f99d 	bl	800894e <UART_EndTransmit_IT>
    return;
 8008614:	e004      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
    return;
 8008616:	bf00      	nop
 8008618:	e002      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
      return;
 800861a:	bf00      	nop
 800861c:	e000      	b.n	8008620 <HAL_UART_IRQHandler+0x514>
      return;
 800861e:	bf00      	nop
  }
}
 8008620:	37e8      	adds	r7, #232	; 0xe8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop

08008628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b090      	sub	sp, #64	; 0x40
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008678:	e050      	b.n	800871c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008680:	d04c      	beq.n	800871c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <UART_WaitOnFlagUntilTimeout+0x30>
 8008688:	f7fa fe86 	bl	8003398 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008694:	429a      	cmp	r2, r3
 8008696:	d241      	bcs.n	800871c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086b8:	637a      	str	r2, [r7, #52]	; 0x34
 80086ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3314      	adds	r3, #20
 80086d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	613b      	str	r3, [r7, #16]
   return(result);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3314      	adds	r3, #20
 80086ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ec:	623a      	str	r2, [r7, #32]
 80086ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	69f9      	ldr	r1, [r7, #28]
 80086f2:	6a3a      	ldr	r2, [r7, #32]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e00f      	b.n	800873c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4013      	ands	r3, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	429a      	cmp	r2, r3
 800872a:	bf0c      	ite	eq
 800872c:	2301      	moveq	r3, #1
 800872e:	2300      	movne	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	429a      	cmp	r2, r3
 8008738:	d09f      	beq.n	800867a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3740      	adds	r7, #64	; 0x40
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2222      	movs	r2, #34	; 0x22
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008790:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0201 	orr.w	r2, r2, #1
 80087a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0220 	orr.w	r2, r2, #32
 80087b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b095      	sub	sp, #84	; 0x54
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087e8:	643a      	str	r2, [r7, #64]	; 0x40
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3314      	adds	r3, #20
 8008802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	61fb      	str	r3, [r7, #28]
   return(result);
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	64bb      	str	r3, [r7, #72]	; 0x48
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3314      	adds	r3, #20
 800881a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e5      	bne.n	80087fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008834:	2b01      	cmp	r3, #1
 8008836:	d119      	bne.n	800886c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	60bb      	str	r3, [r7, #8]
   return(result);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	647b      	str	r3, [r7, #68]	; 0x44
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008858:	61ba      	str	r2, [r7, #24]
 800885a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e5      	bne.n	8008838 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800887a:	bf00      	nop
 800887c:	3754      	adds	r7, #84	; 0x54
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fecb 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b21      	cmp	r3, #33	; 0x21
 80088c0:	d13e      	bne.n	8008940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ca:	d114      	bne.n	80088f6 <UART_Transmit_IT+0x48>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d110      	bne.n	80088f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	1c9a      	adds	r2, r3, #2
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	621a      	str	r2, [r3, #32]
 80088f4:	e008      	b.n	8008908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6211      	str	r1, [r2, #32]
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29b      	uxth	r3, r3
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	4619      	mov	r1, r3
 8008916:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10f      	bne.n	800893c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800893a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	e000      	b.n	8008942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008940:	2302      	movs	r3, #2
  }
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008964:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe5a 	bl	8008628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08c      	sub	sp, #48	; 0x30
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b22      	cmp	r3, #34	; 0x22
 8008990:	f040 80ab 	bne.w	8008aea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899c:	d117      	bne.n	80089ce <UART_Receive_IT+0x50>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d113      	bne.n	80089ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	1c9a      	adds	r2, r3, #2
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28
 80089cc:	e026      	b.n	8008a1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e0:	d007      	beq.n	80089f2 <UART_Receive_IT+0x74>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <UART_Receive_IT+0x82>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e008      	b.n	8008a12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d15a      	bne.n	8008ae6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0220 	bic.w	r2, r2, #32
 8008a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0201 	bic.w	r2, r2, #1
 8008a5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d135      	bne.n	8008adc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	613b      	str	r3, [r7, #16]
   return(result);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f023 0310 	bic.w	r3, r3, #16
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	623a      	str	r2, [r7, #32]
 8008a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	69f9      	ldr	r1, [r7, #28]
 8008a9c:	6a3a      	ldr	r2, [r7, #32]
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e5      	bne.n	8008a76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d10a      	bne.n	8008ace <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff fdbb 	bl	8008650 <HAL_UARTEx_RxEventCallback>
 8008ada:	e002      	b.n	8008ae2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fa fadd 	bl	800309c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e002      	b.n	8008aec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e000      	b.n	8008aec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008aea:	2302      	movs	r3, #2
  }
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3730      	adds	r7, #48	; 0x30
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af8:	b0c0      	sub	sp, #256	; 0x100
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	68d9      	ldr	r1, [r3, #12]
 8008b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	ea40 0301 	orr.w	r3, r0, r1
 8008b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b4c:	f021 010c 	bic.w	r1, r1, #12
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6e:	6999      	ldr	r1, [r3, #24]
 8008b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	ea40 0301 	orr.w	r3, r0, r1
 8008b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b8f      	ldr	r3, [pc, #572]	; (8008dc0 <UART_SetConfig+0x2cc>)
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d005      	beq.n	8008b94 <UART_SetConfig+0xa0>
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4b8d      	ldr	r3, [pc, #564]	; (8008dc4 <UART_SetConfig+0x2d0>)
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d104      	bne.n	8008b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b94:	f7fd fb6a 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 8008b98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b9c:	e003      	b.n	8008ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b9e:	f7fd fb51 	bl	8006244 <HAL_RCC_GetPCLK1Freq>
 8008ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	f040 810c 	bne.w	8008dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	1891      	adds	r1, r2, r2
 8008bcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bce:	415b      	adcs	r3, r3
 8008bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	eb12 0801 	adds.w	r8, r2, r1
 8008bdc:	4629      	mov	r1, r5
 8008bde:	eb43 0901 	adc.w	r9, r3, r1
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bf6:	4690      	mov	r8, r2
 8008bf8:	4699      	mov	r9, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	eb18 0303 	adds.w	r3, r8, r3
 8008c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c04:	462b      	mov	r3, r5
 8008c06:	eb49 0303 	adc.w	r3, r9, r3
 8008c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c22:	460b      	mov	r3, r1
 8008c24:	18db      	adds	r3, r3, r3
 8008c26:	653b      	str	r3, [r7, #80]	; 0x50
 8008c28:	4613      	mov	r3, r2
 8008c2a:	eb42 0303 	adc.w	r3, r2, r3
 8008c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c38:	f7f7 ff38 	bl	8000aac <__aeabi_uldivmod>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4b61      	ldr	r3, [pc, #388]	; (8008dc8 <UART_SetConfig+0x2d4>)
 8008c42:	fba3 2302 	umull	r2, r3, r3, r2
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	011c      	lsls	r4, r3, #4
 8008c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	464b      	mov	r3, r9
 8008c60:	1891      	adds	r1, r2, r2
 8008c62:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c64:	415b      	adcs	r3, r3
 8008c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8008c72:	4649      	mov	r1, r9
 8008c74:	eb43 0b01 	adc.w	fp, r3, r1
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c8c:	4692      	mov	sl, r2
 8008c8e:	469b      	mov	fp, r3
 8008c90:	4643      	mov	r3, r8
 8008c92:	eb1a 0303 	adds.w	r3, sl, r3
 8008c96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8008ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	18db      	adds	r3, r3, r3
 8008cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	eb42 0303 	adc.w	r3, r2, r3
 8008cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8008cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cce:	f7f7 feed 	bl	8000aac <__aeabi_uldivmod>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <UART_SetConfig+0x2d4>)
 8008cda:	fba3 2301 	umull	r2, r3, r3, r1
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	2264      	movs	r2, #100	; 0x64
 8008ce2:	fb02 f303 	mul.w	r3, r2, r3
 8008ce6:	1acb      	subs	r3, r1, r3
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008cee:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <UART_SetConfig+0x2d4>)
 8008cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cfc:	441c      	add	r4, r3
 8008cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d10:	4642      	mov	r2, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	1891      	adds	r1, r2, r2
 8008d16:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d18:	415b      	adcs	r3, r3
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d20:	4641      	mov	r1, r8
 8008d22:	1851      	adds	r1, r2, r1
 8008d24:	6339      	str	r1, [r7, #48]	; 0x30
 8008d26:	4649      	mov	r1, r9
 8008d28:	414b      	adcs	r3, r1
 8008d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d38:	4659      	mov	r1, fp
 8008d3a:	00cb      	lsls	r3, r1, #3
 8008d3c:	4651      	mov	r1, sl
 8008d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d42:	4651      	mov	r1, sl
 8008d44:	00ca      	lsls	r2, r1, #3
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d54:	464b      	mov	r3, r9
 8008d56:	460a      	mov	r2, r1
 8008d58:	eb42 0303 	adc.w	r3, r2, r3
 8008d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d74:	460b      	mov	r3, r1
 8008d76:	18db      	adds	r3, r3, r3
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	eb42 0303 	adc.w	r3, r2, r3
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d8a:	f7f7 fe8f 	bl	8000aac <__aeabi_uldivmod>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <UART_SetConfig+0x2d4>)
 8008d94:	fba3 1302 	umull	r1, r3, r3, r2
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	2164      	movs	r1, #100	; 0x64
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	3332      	adds	r3, #50	; 0x32
 8008da6:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <UART_SetConfig+0x2d4>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	f003 0207 	and.w	r2, r3, #7
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4422      	add	r2, r4
 8008dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dbc:	e105      	b.n	8008fca <UART_SetConfig+0x4d6>
 8008dbe:	bf00      	nop
 8008dc0:	40011000 	.word	0x40011000
 8008dc4:	40011400 	.word	0x40011400
 8008dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008dde:	4642      	mov	r2, r8
 8008de0:	464b      	mov	r3, r9
 8008de2:	1891      	adds	r1, r2, r2
 8008de4:	6239      	str	r1, [r7, #32]
 8008de6:	415b      	adcs	r3, r3
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dee:	4641      	mov	r1, r8
 8008df0:	1854      	adds	r4, r2, r1
 8008df2:	4649      	mov	r1, r9
 8008df4:	eb43 0501 	adc.w	r5, r3, r1
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	f04f 0300 	mov.w	r3, #0
 8008e00:	00eb      	lsls	r3, r5, #3
 8008e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e06:	00e2      	lsls	r2, r4, #3
 8008e08:	4614      	mov	r4, r2
 8008e0a:	461d      	mov	r5, r3
 8008e0c:	4643      	mov	r3, r8
 8008e0e:	18e3      	adds	r3, r4, r3
 8008e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e14:	464b      	mov	r3, r9
 8008e16:	eb45 0303 	adc.w	r3, r5, r3
 8008e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	008b      	lsls	r3, r1, #2
 8008e3e:	4621      	mov	r1, r4
 8008e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e44:	4621      	mov	r1, r4
 8008e46:	008a      	lsls	r2, r1, #2
 8008e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e4c:	f7f7 fe2e 	bl	8000aac <__aeabi_uldivmod>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4b60      	ldr	r3, [pc, #384]	; (8008fd8 <UART_SetConfig+0x4e4>)
 8008e56:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	011c      	lsls	r4, r3, #4
 8008e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e70:	4642      	mov	r2, r8
 8008e72:	464b      	mov	r3, r9
 8008e74:	1891      	adds	r1, r2, r2
 8008e76:	61b9      	str	r1, [r7, #24]
 8008e78:	415b      	adcs	r3, r3
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e80:	4641      	mov	r1, r8
 8008e82:	1851      	adds	r1, r2, r1
 8008e84:	6139      	str	r1, [r7, #16]
 8008e86:	4649      	mov	r1, r9
 8008e88:	414b      	adcs	r3, r1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	00cb      	lsls	r3, r1, #3
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	00ca      	lsls	r2, r1, #3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4642      	mov	r2, r8
 8008eae:	189b      	adds	r3, r3, r2
 8008eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	eb42 0303 	adc.w	r3, r2, r3
 8008ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ed8:	4649      	mov	r1, r9
 8008eda:	008b      	lsls	r3, r1, #2
 8008edc:	4641      	mov	r1, r8
 8008ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	008a      	lsls	r2, r1, #2
 8008ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008eea:	f7f7 fddf 	bl	8000aac <__aeabi_uldivmod>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4b39      	ldr	r3, [pc, #228]	; (8008fd8 <UART_SetConfig+0x4e4>)
 8008ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ef8:	095b      	lsrs	r3, r3, #5
 8008efa:	2164      	movs	r1, #100	; 0x64
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	3332      	adds	r3, #50	; 0x32
 8008f06:	4a34      	ldr	r2, [pc, #208]	; (8008fd8 <UART_SetConfig+0x4e4>)
 8008f08:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0c:	095b      	lsrs	r3, r3, #5
 8008f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f12:	441c      	add	r4, r3
 8008f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f18:	2200      	movs	r2, #0
 8008f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f1c:	677a      	str	r2, [r7, #116]	; 0x74
 8008f1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	1891      	adds	r1, r2, r2
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	415b      	adcs	r3, r3
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f32:	4641      	mov	r1, r8
 8008f34:	1851      	adds	r1, r2, r1
 8008f36:	6039      	str	r1, [r7, #0]
 8008f38:	4649      	mov	r1, r9
 8008f3a:	414b      	adcs	r3, r1
 8008f3c:	607b      	str	r3, [r7, #4]
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	00cb      	lsls	r3, r1, #3
 8008f4e:	4651      	mov	r1, sl
 8008f50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f54:	4651      	mov	r1, sl
 8008f56:	00ca      	lsls	r2, r1, #3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4642      	mov	r2, r8
 8008f60:	189b      	adds	r3, r3, r2
 8008f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f64:	464b      	mov	r3, r9
 8008f66:	460a      	mov	r2, r1
 8008f68:	eb42 0303 	adc.w	r3, r2, r3
 8008f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	663b      	str	r3, [r7, #96]	; 0x60
 8008f78:	667a      	str	r2, [r7, #100]	; 0x64
 8008f7a:	f04f 0200 	mov.w	r2, #0
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f86:	4649      	mov	r1, r9
 8008f88:	008b      	lsls	r3, r1, #2
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f90:	4641      	mov	r1, r8
 8008f92:	008a      	lsls	r2, r1, #2
 8008f94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f98:	f7f7 fd88 	bl	8000aac <__aeabi_uldivmod>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4b0d      	ldr	r3, [pc, #52]	; (8008fd8 <UART_SetConfig+0x4e4>)
 8008fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	2164      	movs	r1, #100	; 0x64
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	3332      	adds	r3, #50	; 0x32
 8008fb4:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <UART_SetConfig+0x4e4>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	095b      	lsrs	r3, r3, #5
 8008fbc:	f003 020f 	and.w	r2, r3, #15
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4422      	add	r2, r4
 8008fc8:	609a      	str	r2, [r3, #8]
}
 8008fca:	bf00      	nop
 8008fcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd6:	bf00      	nop
 8008fd8:	51eb851f 	.word	0x51eb851f

08008fdc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	f023 0101 	bic.w	r1, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b08      	cmp	r3, #8
 8009004:	d102      	bne.n	800900c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009006:	2340      	movs	r3, #64	; 0x40
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e001      	b.n	8009010 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800901c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009022:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009028:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800902e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009034:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800903a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009040:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009046:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800904c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	4313      	orrs	r3, r2
 800905e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4313      	orrs	r3, r2
 8009068:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800906a:	4b10      	ldr	r3, [pc, #64]	; (80090ac <FSMC_NORSRAM_Init+0xd0>)
 800906c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009074:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800907c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	43db      	mvns	r3, r3
 800908c:	ea02 0103 	and.w	r1, r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	4319      	orrs	r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	0008fb7f 	.word	0x0008fb7f

080090b0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	431a      	orrs	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	431a      	orrs	r2, r3
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	051b      	lsls	r3, r3, #20
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	3b02      	subs	r3, #2
 80090f6:	061b      	lsls	r3, r3, #24
 80090f8:	431a      	orrs	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	4313      	orrs	r3, r2
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	3201      	adds	r2, #1
 8009104:	4319      	orrs	r1, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
 8009128:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009130:	d11d      	bne.n	800916e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800913c:	4013      	ands	r3, r2
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	6811      	ldr	r1, [r2, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	6852      	ldr	r2, [r2, #4]
 8009146:	0112      	lsls	r2, r2, #4
 8009148:	4311      	orrs	r1, r2
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	6892      	ldr	r2, [r2, #8]
 800914e:	0212      	lsls	r2, r2, #8
 8009150:	4311      	orrs	r1, r2
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	6992      	ldr	r2, [r2, #24]
 8009156:	4311      	orrs	r1, r2
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	68d2      	ldr	r2, [r2, #12]
 800915c:	0412      	lsls	r2, r2, #16
 800915e:	430a      	orrs	r2, r1
 8009160:	ea43 0102 	orr.w	r1, r3, r2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800916c:	e005      	b.n	800917a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	cff00000 	.word	0xcff00000

0800918c <__errno>:
 800918c:	4b01      	ldr	r3, [pc, #4]	; (8009194 <__errno+0x8>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000001c 	.word	0x2000001c

08009198 <__libc_init_array>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4d0d      	ldr	r5, [pc, #52]	; (80091d0 <__libc_init_array+0x38>)
 800919c:	4c0d      	ldr	r4, [pc, #52]	; (80091d4 <__libc_init_array+0x3c>)
 800919e:	1b64      	subs	r4, r4, r5
 80091a0:	10a4      	asrs	r4, r4, #2
 80091a2:	2600      	movs	r6, #0
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	d109      	bne.n	80091bc <__libc_init_array+0x24>
 80091a8:	4d0b      	ldr	r5, [pc, #44]	; (80091d8 <__libc_init_array+0x40>)
 80091aa:	4c0c      	ldr	r4, [pc, #48]	; (80091dc <__libc_init_array+0x44>)
 80091ac:	f000 fc8e 	bl	8009acc <_init>
 80091b0:	1b64      	subs	r4, r4, r5
 80091b2:	10a4      	asrs	r4, r4, #2
 80091b4:	2600      	movs	r6, #0
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	d105      	bne.n	80091c6 <__libc_init_array+0x2e>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c0:	4798      	blx	r3
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7ee      	b.n	80091a4 <__libc_init_array+0xc>
 80091c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ca:	4798      	blx	r3
 80091cc:	3601      	adds	r6, #1
 80091ce:	e7f2      	b.n	80091b6 <__libc_init_array+0x1e>
 80091d0:	0800cb78 	.word	0x0800cb78
 80091d4:	0800cb78 	.word	0x0800cb78
 80091d8:	0800cb78 	.word	0x0800cb78
 80091dc:	0800cb7c 	.word	0x0800cb7c

080091e0 <memset>:
 80091e0:	4402      	add	r2, r0
 80091e2:	4603      	mov	r3, r0
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d100      	bne.n	80091ea <memset+0xa>
 80091e8:	4770      	bx	lr
 80091ea:	f803 1b01 	strb.w	r1, [r3], #1
 80091ee:	e7f9      	b.n	80091e4 <memset+0x4>

080091f0 <siprintf>:
 80091f0:	b40e      	push	{r1, r2, r3}
 80091f2:	b500      	push	{lr}
 80091f4:	b09c      	sub	sp, #112	; 0x70
 80091f6:	ab1d      	add	r3, sp, #116	; 0x74
 80091f8:	9002      	str	r0, [sp, #8]
 80091fa:	9006      	str	r0, [sp, #24]
 80091fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009200:	4809      	ldr	r0, [pc, #36]	; (8009228 <siprintf+0x38>)
 8009202:	9107      	str	r1, [sp, #28]
 8009204:	9104      	str	r1, [sp, #16]
 8009206:	4909      	ldr	r1, [pc, #36]	; (800922c <siprintf+0x3c>)
 8009208:	f853 2b04 	ldr.w	r2, [r3], #4
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	6800      	ldr	r0, [r0, #0]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	a902      	add	r1, sp, #8
 8009214:	f000 f868 	bl	80092e8 <_svfiprintf_r>
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	b01c      	add	sp, #112	; 0x70
 8009220:	f85d eb04 	ldr.w	lr, [sp], #4
 8009224:	b003      	add	sp, #12
 8009226:	4770      	bx	lr
 8009228:	2000001c 	.word	0x2000001c
 800922c:	ffff0208 	.word	0xffff0208

08009230 <__ssputs_r>:
 8009230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	688e      	ldr	r6, [r1, #8]
 8009236:	429e      	cmp	r6, r3
 8009238:	4682      	mov	sl, r0
 800923a:	460c      	mov	r4, r1
 800923c:	4690      	mov	r8, r2
 800923e:	461f      	mov	r7, r3
 8009240:	d838      	bhi.n	80092b4 <__ssputs_r+0x84>
 8009242:	898a      	ldrh	r2, [r1, #12]
 8009244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009248:	d032      	beq.n	80092b0 <__ssputs_r+0x80>
 800924a:	6825      	ldr	r5, [r4, #0]
 800924c:	6909      	ldr	r1, [r1, #16]
 800924e:	eba5 0901 	sub.w	r9, r5, r1
 8009252:	6965      	ldr	r5, [r4, #20]
 8009254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800925c:	3301      	adds	r3, #1
 800925e:	444b      	add	r3, r9
 8009260:	106d      	asrs	r5, r5, #1
 8009262:	429d      	cmp	r5, r3
 8009264:	bf38      	it	cc
 8009266:	461d      	movcc	r5, r3
 8009268:	0553      	lsls	r3, r2, #21
 800926a:	d531      	bpl.n	80092d0 <__ssputs_r+0xa0>
 800926c:	4629      	mov	r1, r5
 800926e:	f000 fb63 	bl	8009938 <_malloc_r>
 8009272:	4606      	mov	r6, r0
 8009274:	b950      	cbnz	r0, 800928c <__ssputs_r+0x5c>
 8009276:	230c      	movs	r3, #12
 8009278:	f8ca 3000 	str.w	r3, [sl]
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928c:	6921      	ldr	r1, [r4, #16]
 800928e:	464a      	mov	r2, r9
 8009290:	f000 fabe 	bl	8009810 <memcpy>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800929a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	6126      	str	r6, [r4, #16]
 80092a2:	6165      	str	r5, [r4, #20]
 80092a4:	444e      	add	r6, r9
 80092a6:	eba5 0509 	sub.w	r5, r5, r9
 80092aa:	6026      	str	r6, [r4, #0]
 80092ac:	60a5      	str	r5, [r4, #8]
 80092ae:	463e      	mov	r6, r7
 80092b0:	42be      	cmp	r6, r7
 80092b2:	d900      	bls.n	80092b6 <__ssputs_r+0x86>
 80092b4:	463e      	mov	r6, r7
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	4632      	mov	r2, r6
 80092ba:	4641      	mov	r1, r8
 80092bc:	f000 fab6 	bl	800982c <memmove>
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	1b9b      	subs	r3, r3, r6
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4433      	add	r3, r6
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	2000      	movs	r0, #0
 80092ce:	e7db      	b.n	8009288 <__ssputs_r+0x58>
 80092d0:	462a      	mov	r2, r5
 80092d2:	f000 fba5 	bl	8009a20 <_realloc_r>
 80092d6:	4606      	mov	r6, r0
 80092d8:	2800      	cmp	r0, #0
 80092da:	d1e1      	bne.n	80092a0 <__ssputs_r+0x70>
 80092dc:	6921      	ldr	r1, [r4, #16]
 80092de:	4650      	mov	r0, sl
 80092e0:	f000 fabe 	bl	8009860 <_free_r>
 80092e4:	e7c7      	b.n	8009276 <__ssputs_r+0x46>
	...

080092e8 <_svfiprintf_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	4698      	mov	r8, r3
 80092ee:	898b      	ldrh	r3, [r1, #12]
 80092f0:	061b      	lsls	r3, r3, #24
 80092f2:	b09d      	sub	sp, #116	; 0x74
 80092f4:	4607      	mov	r7, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	4614      	mov	r4, r2
 80092fa:	d50e      	bpl.n	800931a <_svfiprintf_r+0x32>
 80092fc:	690b      	ldr	r3, [r1, #16]
 80092fe:	b963      	cbnz	r3, 800931a <_svfiprintf_r+0x32>
 8009300:	2140      	movs	r1, #64	; 0x40
 8009302:	f000 fb19 	bl	8009938 <_malloc_r>
 8009306:	6028      	str	r0, [r5, #0]
 8009308:	6128      	str	r0, [r5, #16]
 800930a:	b920      	cbnz	r0, 8009316 <_svfiprintf_r+0x2e>
 800930c:	230c      	movs	r3, #12
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e0d1      	b.n	80094ba <_svfiprintf_r+0x1d2>
 8009316:	2340      	movs	r3, #64	; 0x40
 8009318:	616b      	str	r3, [r5, #20]
 800931a:	2300      	movs	r3, #0
 800931c:	9309      	str	r3, [sp, #36]	; 0x24
 800931e:	2320      	movs	r3, #32
 8009320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009324:	f8cd 800c 	str.w	r8, [sp, #12]
 8009328:	2330      	movs	r3, #48	; 0x30
 800932a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094d4 <_svfiprintf_r+0x1ec>
 800932e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009332:	f04f 0901 	mov.w	r9, #1
 8009336:	4623      	mov	r3, r4
 8009338:	469a      	mov	sl, r3
 800933a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933e:	b10a      	cbz	r2, 8009344 <_svfiprintf_r+0x5c>
 8009340:	2a25      	cmp	r2, #37	; 0x25
 8009342:	d1f9      	bne.n	8009338 <_svfiprintf_r+0x50>
 8009344:	ebba 0b04 	subs.w	fp, sl, r4
 8009348:	d00b      	beq.n	8009362 <_svfiprintf_r+0x7a>
 800934a:	465b      	mov	r3, fp
 800934c:	4622      	mov	r2, r4
 800934e:	4629      	mov	r1, r5
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ff6d 	bl	8009230 <__ssputs_r>
 8009356:	3001      	adds	r0, #1
 8009358:	f000 80aa 	beq.w	80094b0 <_svfiprintf_r+0x1c8>
 800935c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935e:	445a      	add	r2, fp
 8009360:	9209      	str	r2, [sp, #36]	; 0x24
 8009362:	f89a 3000 	ldrb.w	r3, [sl]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80a2 	beq.w	80094b0 <_svfiprintf_r+0x1c8>
 800936c:	2300      	movs	r3, #0
 800936e:	f04f 32ff 	mov.w	r2, #4294967295
 8009372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009376:	f10a 0a01 	add.w	sl, sl, #1
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009382:	931a      	str	r3, [sp, #104]	; 0x68
 8009384:	4654      	mov	r4, sl
 8009386:	2205      	movs	r2, #5
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4851      	ldr	r0, [pc, #324]	; (80094d4 <_svfiprintf_r+0x1ec>)
 800938e:	f7f6 ff1f 	bl	80001d0 <memchr>
 8009392:	9a04      	ldr	r2, [sp, #16]
 8009394:	b9d8      	cbnz	r0, 80093ce <_svfiprintf_r+0xe6>
 8009396:	06d0      	lsls	r0, r2, #27
 8009398:	bf44      	itt	mi
 800939a:	2320      	movmi	r3, #32
 800939c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a0:	0711      	lsls	r1, r2, #28
 80093a2:	bf44      	itt	mi
 80093a4:	232b      	movmi	r3, #43	; 0x2b
 80093a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093aa:	f89a 3000 	ldrb.w	r3, [sl]
 80093ae:	2b2a      	cmp	r3, #42	; 0x2a
 80093b0:	d015      	beq.n	80093de <_svfiprintf_r+0xf6>
 80093b2:	9a07      	ldr	r2, [sp, #28]
 80093b4:	4654      	mov	r4, sl
 80093b6:	2000      	movs	r0, #0
 80093b8:	f04f 0c0a 	mov.w	ip, #10
 80093bc:	4621      	mov	r1, r4
 80093be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c2:	3b30      	subs	r3, #48	; 0x30
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d94e      	bls.n	8009466 <_svfiprintf_r+0x17e>
 80093c8:	b1b0      	cbz	r0, 80093f8 <_svfiprintf_r+0x110>
 80093ca:	9207      	str	r2, [sp, #28]
 80093cc:	e014      	b.n	80093f8 <_svfiprintf_r+0x110>
 80093ce:	eba0 0308 	sub.w	r3, r0, r8
 80093d2:	fa09 f303 	lsl.w	r3, r9, r3
 80093d6:	4313      	orrs	r3, r2
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	46a2      	mov	sl, r4
 80093dc:	e7d2      	b.n	8009384 <_svfiprintf_r+0x9c>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d19      	adds	r1, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9103      	str	r1, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfbb      	ittet	lt
 80093ea:	425b      	neglt	r3, r3
 80093ec:	f042 0202 	orrlt.w	r2, r2, #2
 80093f0:	9307      	strge	r3, [sp, #28]
 80093f2:	9307      	strlt	r3, [sp, #28]
 80093f4:	bfb8      	it	lt
 80093f6:	9204      	strlt	r2, [sp, #16]
 80093f8:	7823      	ldrb	r3, [r4, #0]
 80093fa:	2b2e      	cmp	r3, #46	; 0x2e
 80093fc:	d10c      	bne.n	8009418 <_svfiprintf_r+0x130>
 80093fe:	7863      	ldrb	r3, [r4, #1]
 8009400:	2b2a      	cmp	r3, #42	; 0x2a
 8009402:	d135      	bne.n	8009470 <_svfiprintf_r+0x188>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	1d1a      	adds	r2, r3, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	9203      	str	r2, [sp, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfb8      	it	lt
 8009410:	f04f 33ff 	movlt.w	r3, #4294967295
 8009414:	3402      	adds	r4, #2
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094e4 <_svfiprintf_r+0x1fc>
 800941c:	7821      	ldrb	r1, [r4, #0]
 800941e:	2203      	movs	r2, #3
 8009420:	4650      	mov	r0, sl
 8009422:	f7f6 fed5 	bl	80001d0 <memchr>
 8009426:	b140      	cbz	r0, 800943a <_svfiprintf_r+0x152>
 8009428:	2340      	movs	r3, #64	; 0x40
 800942a:	eba0 000a 	sub.w	r0, r0, sl
 800942e:	fa03 f000 	lsl.w	r0, r3, r0
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	4303      	orrs	r3, r0
 8009436:	3401      	adds	r4, #1
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943e:	4826      	ldr	r0, [pc, #152]	; (80094d8 <_svfiprintf_r+0x1f0>)
 8009440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009444:	2206      	movs	r2, #6
 8009446:	f7f6 fec3 	bl	80001d0 <memchr>
 800944a:	2800      	cmp	r0, #0
 800944c:	d038      	beq.n	80094c0 <_svfiprintf_r+0x1d8>
 800944e:	4b23      	ldr	r3, [pc, #140]	; (80094dc <_svfiprintf_r+0x1f4>)
 8009450:	bb1b      	cbnz	r3, 800949a <_svfiprintf_r+0x1b2>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	3307      	adds	r3, #7
 8009456:	f023 0307 	bic.w	r3, r3, #7
 800945a:	3308      	adds	r3, #8
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	4433      	add	r3, r6
 8009462:	9309      	str	r3, [sp, #36]	; 0x24
 8009464:	e767      	b.n	8009336 <_svfiprintf_r+0x4e>
 8009466:	fb0c 3202 	mla	r2, ip, r2, r3
 800946a:	460c      	mov	r4, r1
 800946c:	2001      	movs	r0, #1
 800946e:	e7a5      	b.n	80093bc <_svfiprintf_r+0xd4>
 8009470:	2300      	movs	r3, #0
 8009472:	3401      	adds	r4, #1
 8009474:	9305      	str	r3, [sp, #20]
 8009476:	4619      	mov	r1, r3
 8009478:	f04f 0c0a 	mov.w	ip, #10
 800947c:	4620      	mov	r0, r4
 800947e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009482:	3a30      	subs	r2, #48	; 0x30
 8009484:	2a09      	cmp	r2, #9
 8009486:	d903      	bls.n	8009490 <_svfiprintf_r+0x1a8>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0c5      	beq.n	8009418 <_svfiprintf_r+0x130>
 800948c:	9105      	str	r1, [sp, #20]
 800948e:	e7c3      	b.n	8009418 <_svfiprintf_r+0x130>
 8009490:	fb0c 2101 	mla	r1, ip, r1, r2
 8009494:	4604      	mov	r4, r0
 8009496:	2301      	movs	r3, #1
 8009498:	e7f0      	b.n	800947c <_svfiprintf_r+0x194>
 800949a:	ab03      	add	r3, sp, #12
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	462a      	mov	r2, r5
 80094a0:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <_svfiprintf_r+0x1f8>)
 80094a2:	a904      	add	r1, sp, #16
 80094a4:	4638      	mov	r0, r7
 80094a6:	f3af 8000 	nop.w
 80094aa:	1c42      	adds	r2, r0, #1
 80094ac:	4606      	mov	r6, r0
 80094ae:	d1d6      	bne.n	800945e <_svfiprintf_r+0x176>
 80094b0:	89ab      	ldrh	r3, [r5, #12]
 80094b2:	065b      	lsls	r3, r3, #25
 80094b4:	f53f af2c 	bmi.w	8009310 <_svfiprintf_r+0x28>
 80094b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ba:	b01d      	add	sp, #116	; 0x74
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c0:	ab03      	add	r3, sp, #12
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <_svfiprintf_r+0x1f8>)
 80094c8:	a904      	add	r1, sp, #16
 80094ca:	4638      	mov	r0, r7
 80094cc:	f000 f87a 	bl	80095c4 <_printf_i>
 80094d0:	e7eb      	b.n	80094aa <_svfiprintf_r+0x1c2>
 80094d2:	bf00      	nop
 80094d4:	0800cb3c 	.word	0x0800cb3c
 80094d8:	0800cb46 	.word	0x0800cb46
 80094dc:	00000000 	.word	0x00000000
 80094e0:	08009231 	.word	0x08009231
 80094e4:	0800cb42 	.word	0x0800cb42

080094e8 <_printf_common>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	4616      	mov	r6, r2
 80094ee:	4699      	mov	r9, r3
 80094f0:	688a      	ldr	r2, [r1, #8]
 80094f2:	690b      	ldr	r3, [r1, #16]
 80094f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094f8:	4293      	cmp	r3, r2
 80094fa:	bfb8      	it	lt
 80094fc:	4613      	movlt	r3, r2
 80094fe:	6033      	str	r3, [r6, #0]
 8009500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009504:	4607      	mov	r7, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b10a      	cbz	r2, 800950e <_printf_common+0x26>
 800950a:	3301      	adds	r3, #1
 800950c:	6033      	str	r3, [r6, #0]
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	0699      	lsls	r1, r3, #26
 8009512:	bf42      	ittt	mi
 8009514:	6833      	ldrmi	r3, [r6, #0]
 8009516:	3302      	addmi	r3, #2
 8009518:	6033      	strmi	r3, [r6, #0]
 800951a:	6825      	ldr	r5, [r4, #0]
 800951c:	f015 0506 	ands.w	r5, r5, #6
 8009520:	d106      	bne.n	8009530 <_printf_common+0x48>
 8009522:	f104 0a19 	add.w	sl, r4, #25
 8009526:	68e3      	ldr	r3, [r4, #12]
 8009528:	6832      	ldr	r2, [r6, #0]
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	42ab      	cmp	r3, r5
 800952e:	dc26      	bgt.n	800957e <_printf_common+0x96>
 8009530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009534:	1e13      	subs	r3, r2, #0
 8009536:	6822      	ldr	r2, [r4, #0]
 8009538:	bf18      	it	ne
 800953a:	2301      	movne	r3, #1
 800953c:	0692      	lsls	r2, r2, #26
 800953e:	d42b      	bmi.n	8009598 <_printf_common+0xb0>
 8009540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	47c0      	blx	r8
 800954a:	3001      	adds	r0, #1
 800954c:	d01e      	beq.n	800958c <_printf_common+0xa4>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	68e5      	ldr	r5, [r4, #12]
 8009552:	6832      	ldr	r2, [r6, #0]
 8009554:	f003 0306 	and.w	r3, r3, #6
 8009558:	2b04      	cmp	r3, #4
 800955a:	bf08      	it	eq
 800955c:	1aad      	subeq	r5, r5, r2
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	6922      	ldr	r2, [r4, #16]
 8009562:	bf0c      	ite	eq
 8009564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009568:	2500      	movne	r5, #0
 800956a:	4293      	cmp	r3, r2
 800956c:	bfc4      	itt	gt
 800956e:	1a9b      	subgt	r3, r3, r2
 8009570:	18ed      	addgt	r5, r5, r3
 8009572:	2600      	movs	r6, #0
 8009574:	341a      	adds	r4, #26
 8009576:	42b5      	cmp	r5, r6
 8009578:	d11a      	bne.n	80095b0 <_printf_common+0xc8>
 800957a:	2000      	movs	r0, #0
 800957c:	e008      	b.n	8009590 <_printf_common+0xa8>
 800957e:	2301      	movs	r3, #1
 8009580:	4652      	mov	r2, sl
 8009582:	4649      	mov	r1, r9
 8009584:	4638      	mov	r0, r7
 8009586:	47c0      	blx	r8
 8009588:	3001      	adds	r0, #1
 800958a:	d103      	bne.n	8009594 <_printf_common+0xac>
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009594:	3501      	adds	r5, #1
 8009596:	e7c6      	b.n	8009526 <_printf_common+0x3e>
 8009598:	18e1      	adds	r1, r4, r3
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	2030      	movs	r0, #48	; 0x30
 800959e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095a2:	4422      	add	r2, r4
 80095a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095ac:	3302      	adds	r3, #2
 80095ae:	e7c7      	b.n	8009540 <_printf_common+0x58>
 80095b0:	2301      	movs	r3, #1
 80095b2:	4622      	mov	r2, r4
 80095b4:	4649      	mov	r1, r9
 80095b6:	4638      	mov	r0, r7
 80095b8:	47c0      	blx	r8
 80095ba:	3001      	adds	r0, #1
 80095bc:	d0e6      	beq.n	800958c <_printf_common+0xa4>
 80095be:	3601      	adds	r6, #1
 80095c0:	e7d9      	b.n	8009576 <_printf_common+0x8e>
	...

080095c4 <_printf_i>:
 80095c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	7e0f      	ldrb	r7, [r1, #24]
 80095ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095cc:	2f78      	cmp	r7, #120	; 0x78
 80095ce:	4691      	mov	r9, r2
 80095d0:	4680      	mov	r8, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	469a      	mov	sl, r3
 80095d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095da:	d807      	bhi.n	80095ec <_printf_i+0x28>
 80095dc:	2f62      	cmp	r7, #98	; 0x62
 80095de:	d80a      	bhi.n	80095f6 <_printf_i+0x32>
 80095e0:	2f00      	cmp	r7, #0
 80095e2:	f000 80d8 	beq.w	8009796 <_printf_i+0x1d2>
 80095e6:	2f58      	cmp	r7, #88	; 0x58
 80095e8:	f000 80a3 	beq.w	8009732 <_printf_i+0x16e>
 80095ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095f4:	e03a      	b.n	800966c <_printf_i+0xa8>
 80095f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095fa:	2b15      	cmp	r3, #21
 80095fc:	d8f6      	bhi.n	80095ec <_printf_i+0x28>
 80095fe:	a101      	add	r1, pc, #4	; (adr r1, 8009604 <_printf_i+0x40>)
 8009600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009604:	0800965d 	.word	0x0800965d
 8009608:	08009671 	.word	0x08009671
 800960c:	080095ed 	.word	0x080095ed
 8009610:	080095ed 	.word	0x080095ed
 8009614:	080095ed 	.word	0x080095ed
 8009618:	080095ed 	.word	0x080095ed
 800961c:	08009671 	.word	0x08009671
 8009620:	080095ed 	.word	0x080095ed
 8009624:	080095ed 	.word	0x080095ed
 8009628:	080095ed 	.word	0x080095ed
 800962c:	080095ed 	.word	0x080095ed
 8009630:	0800977d 	.word	0x0800977d
 8009634:	080096a1 	.word	0x080096a1
 8009638:	0800975f 	.word	0x0800975f
 800963c:	080095ed 	.word	0x080095ed
 8009640:	080095ed 	.word	0x080095ed
 8009644:	0800979f 	.word	0x0800979f
 8009648:	080095ed 	.word	0x080095ed
 800964c:	080096a1 	.word	0x080096a1
 8009650:	080095ed 	.word	0x080095ed
 8009654:	080095ed 	.word	0x080095ed
 8009658:	08009767 	.word	0x08009767
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	1d1a      	adds	r2, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	602a      	str	r2, [r5, #0]
 8009664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800966c:	2301      	movs	r3, #1
 800966e:	e0a3      	b.n	80097b8 <_printf_i+0x1f4>
 8009670:	6820      	ldr	r0, [r4, #0]
 8009672:	6829      	ldr	r1, [r5, #0]
 8009674:	0606      	lsls	r6, r0, #24
 8009676:	f101 0304 	add.w	r3, r1, #4
 800967a:	d50a      	bpl.n	8009692 <_printf_i+0xce>
 800967c:	680e      	ldr	r6, [r1, #0]
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	2e00      	cmp	r6, #0
 8009682:	da03      	bge.n	800968c <_printf_i+0xc8>
 8009684:	232d      	movs	r3, #45	; 0x2d
 8009686:	4276      	negs	r6, r6
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800968c:	485e      	ldr	r0, [pc, #376]	; (8009808 <_printf_i+0x244>)
 800968e:	230a      	movs	r3, #10
 8009690:	e019      	b.n	80096c6 <_printf_i+0x102>
 8009692:	680e      	ldr	r6, [r1, #0]
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800969a:	bf18      	it	ne
 800969c:	b236      	sxthne	r6, r6
 800969e:	e7ef      	b.n	8009680 <_printf_i+0xbc>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	6820      	ldr	r0, [r4, #0]
 80096a4:	1d19      	adds	r1, r3, #4
 80096a6:	6029      	str	r1, [r5, #0]
 80096a8:	0601      	lsls	r1, r0, #24
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0xec>
 80096ac:	681e      	ldr	r6, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0xf2>
 80096b0:	0646      	lsls	r6, r0, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0xe8>
 80096b4:	881e      	ldrh	r6, [r3, #0]
 80096b6:	4854      	ldr	r0, [pc, #336]	; (8009808 <_printf_i+0x244>)
 80096b8:	2f6f      	cmp	r7, #111	; 0x6f
 80096ba:	bf0c      	ite	eq
 80096bc:	2308      	moveq	r3, #8
 80096be:	230a      	movne	r3, #10
 80096c0:	2100      	movs	r1, #0
 80096c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096c6:	6865      	ldr	r5, [r4, #4]
 80096c8:	60a5      	str	r5, [r4, #8]
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	bfa2      	ittt	ge
 80096ce:	6821      	ldrge	r1, [r4, #0]
 80096d0:	f021 0104 	bicge.w	r1, r1, #4
 80096d4:	6021      	strge	r1, [r4, #0]
 80096d6:	b90e      	cbnz	r6, 80096dc <_printf_i+0x118>
 80096d8:	2d00      	cmp	r5, #0
 80096da:	d04d      	beq.n	8009778 <_printf_i+0x1b4>
 80096dc:	4615      	mov	r5, r2
 80096de:	fbb6 f1f3 	udiv	r1, r6, r3
 80096e2:	fb03 6711 	mls	r7, r3, r1, r6
 80096e6:	5dc7      	ldrb	r7, [r0, r7]
 80096e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096ec:	4637      	mov	r7, r6
 80096ee:	42bb      	cmp	r3, r7
 80096f0:	460e      	mov	r6, r1
 80096f2:	d9f4      	bls.n	80096de <_printf_i+0x11a>
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d10b      	bne.n	8009710 <_printf_i+0x14c>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	07de      	lsls	r6, r3, #31
 80096fc:	d508      	bpl.n	8009710 <_printf_i+0x14c>
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	6861      	ldr	r1, [r4, #4]
 8009702:	4299      	cmp	r1, r3
 8009704:	bfde      	ittt	le
 8009706:	2330      	movle	r3, #48	; 0x30
 8009708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800970c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009710:	1b52      	subs	r2, r2, r5
 8009712:	6122      	str	r2, [r4, #16]
 8009714:	f8cd a000 	str.w	sl, [sp]
 8009718:	464b      	mov	r3, r9
 800971a:	aa03      	add	r2, sp, #12
 800971c:	4621      	mov	r1, r4
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff fee2 	bl	80094e8 <_printf_common>
 8009724:	3001      	adds	r0, #1
 8009726:	d14c      	bne.n	80097c2 <_printf_i+0x1fe>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	b004      	add	sp, #16
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	4835      	ldr	r0, [pc, #212]	; (8009808 <_printf_i+0x244>)
 8009734:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009738:	6829      	ldr	r1, [r5, #0]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009740:	6029      	str	r1, [r5, #0]
 8009742:	061d      	lsls	r5, r3, #24
 8009744:	d514      	bpl.n	8009770 <_printf_i+0x1ac>
 8009746:	07df      	lsls	r7, r3, #31
 8009748:	bf44      	itt	mi
 800974a:	f043 0320 	orrmi.w	r3, r3, #32
 800974e:	6023      	strmi	r3, [r4, #0]
 8009750:	b91e      	cbnz	r6, 800975a <_printf_i+0x196>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f023 0320 	bic.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	2310      	movs	r3, #16
 800975c:	e7b0      	b.n	80096c0 <_printf_i+0xfc>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	f043 0320 	orr.w	r3, r3, #32
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	2378      	movs	r3, #120	; 0x78
 8009768:	4828      	ldr	r0, [pc, #160]	; (800980c <_printf_i+0x248>)
 800976a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800976e:	e7e3      	b.n	8009738 <_printf_i+0x174>
 8009770:	0659      	lsls	r1, r3, #25
 8009772:	bf48      	it	mi
 8009774:	b2b6      	uxthmi	r6, r6
 8009776:	e7e6      	b.n	8009746 <_printf_i+0x182>
 8009778:	4615      	mov	r5, r2
 800977a:	e7bb      	b.n	80096f4 <_printf_i+0x130>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	6826      	ldr	r6, [r4, #0]
 8009780:	6961      	ldr	r1, [r4, #20]
 8009782:	1d18      	adds	r0, r3, #4
 8009784:	6028      	str	r0, [r5, #0]
 8009786:	0635      	lsls	r5, r6, #24
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	d501      	bpl.n	8009790 <_printf_i+0x1cc>
 800978c:	6019      	str	r1, [r3, #0]
 800978e:	e002      	b.n	8009796 <_printf_i+0x1d2>
 8009790:	0670      	lsls	r0, r6, #25
 8009792:	d5fb      	bpl.n	800978c <_printf_i+0x1c8>
 8009794:	8019      	strh	r1, [r3, #0]
 8009796:	2300      	movs	r3, #0
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	4615      	mov	r5, r2
 800979c:	e7ba      	b.n	8009714 <_printf_i+0x150>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	602a      	str	r2, [r5, #0]
 80097a4:	681d      	ldr	r5, [r3, #0]
 80097a6:	6862      	ldr	r2, [r4, #4]
 80097a8:	2100      	movs	r1, #0
 80097aa:	4628      	mov	r0, r5
 80097ac:	f7f6 fd10 	bl	80001d0 <memchr>
 80097b0:	b108      	cbz	r0, 80097b6 <_printf_i+0x1f2>
 80097b2:	1b40      	subs	r0, r0, r5
 80097b4:	6060      	str	r0, [r4, #4]
 80097b6:	6863      	ldr	r3, [r4, #4]
 80097b8:	6123      	str	r3, [r4, #16]
 80097ba:	2300      	movs	r3, #0
 80097bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c0:	e7a8      	b.n	8009714 <_printf_i+0x150>
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	462a      	mov	r2, r5
 80097c6:	4649      	mov	r1, r9
 80097c8:	4640      	mov	r0, r8
 80097ca:	47d0      	blx	sl
 80097cc:	3001      	adds	r0, #1
 80097ce:	d0ab      	beq.n	8009728 <_printf_i+0x164>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	079b      	lsls	r3, r3, #30
 80097d4:	d413      	bmi.n	80097fe <_printf_i+0x23a>
 80097d6:	68e0      	ldr	r0, [r4, #12]
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	4298      	cmp	r0, r3
 80097dc:	bfb8      	it	lt
 80097de:	4618      	movlt	r0, r3
 80097e0:	e7a4      	b.n	800972c <_printf_i+0x168>
 80097e2:	2301      	movs	r3, #1
 80097e4:	4632      	mov	r2, r6
 80097e6:	4649      	mov	r1, r9
 80097e8:	4640      	mov	r0, r8
 80097ea:	47d0      	blx	sl
 80097ec:	3001      	adds	r0, #1
 80097ee:	d09b      	beq.n	8009728 <_printf_i+0x164>
 80097f0:	3501      	adds	r5, #1
 80097f2:	68e3      	ldr	r3, [r4, #12]
 80097f4:	9903      	ldr	r1, [sp, #12]
 80097f6:	1a5b      	subs	r3, r3, r1
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	dcf2      	bgt.n	80097e2 <_printf_i+0x21e>
 80097fc:	e7eb      	b.n	80097d6 <_printf_i+0x212>
 80097fe:	2500      	movs	r5, #0
 8009800:	f104 0619 	add.w	r6, r4, #25
 8009804:	e7f5      	b.n	80097f2 <_printf_i+0x22e>
 8009806:	bf00      	nop
 8009808:	0800cb4d 	.word	0x0800cb4d
 800980c:	0800cb5e 	.word	0x0800cb5e

08009810 <memcpy>:
 8009810:	440a      	add	r2, r1
 8009812:	4291      	cmp	r1, r2
 8009814:	f100 33ff 	add.w	r3, r0, #4294967295
 8009818:	d100      	bne.n	800981c <memcpy+0xc>
 800981a:	4770      	bx	lr
 800981c:	b510      	push	{r4, lr}
 800981e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009826:	4291      	cmp	r1, r2
 8009828:	d1f9      	bne.n	800981e <memcpy+0xe>
 800982a:	bd10      	pop	{r4, pc}

0800982c <memmove>:
 800982c:	4288      	cmp	r0, r1
 800982e:	b510      	push	{r4, lr}
 8009830:	eb01 0402 	add.w	r4, r1, r2
 8009834:	d902      	bls.n	800983c <memmove+0x10>
 8009836:	4284      	cmp	r4, r0
 8009838:	4623      	mov	r3, r4
 800983a:	d807      	bhi.n	800984c <memmove+0x20>
 800983c:	1e43      	subs	r3, r0, #1
 800983e:	42a1      	cmp	r1, r4
 8009840:	d008      	beq.n	8009854 <memmove+0x28>
 8009842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800984a:	e7f8      	b.n	800983e <memmove+0x12>
 800984c:	4402      	add	r2, r0
 800984e:	4601      	mov	r1, r0
 8009850:	428a      	cmp	r2, r1
 8009852:	d100      	bne.n	8009856 <memmove+0x2a>
 8009854:	bd10      	pop	{r4, pc}
 8009856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800985a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800985e:	e7f7      	b.n	8009850 <memmove+0x24>

08009860 <_free_r>:
 8009860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009862:	2900      	cmp	r1, #0
 8009864:	d044      	beq.n	80098f0 <_free_r+0x90>
 8009866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986a:	9001      	str	r0, [sp, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f1a1 0404 	sub.w	r4, r1, #4
 8009872:	bfb8      	it	lt
 8009874:	18e4      	addlt	r4, r4, r3
 8009876:	f000 f913 	bl	8009aa0 <__malloc_lock>
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <_free_r+0x94>)
 800987c:	9801      	ldr	r0, [sp, #4]
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	b933      	cbnz	r3, 8009890 <_free_r+0x30>
 8009882:	6063      	str	r3, [r4, #4]
 8009884:	6014      	str	r4, [r2, #0]
 8009886:	b003      	add	sp, #12
 8009888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988c:	f000 b90e 	b.w	8009aac <__malloc_unlock>
 8009890:	42a3      	cmp	r3, r4
 8009892:	d908      	bls.n	80098a6 <_free_r+0x46>
 8009894:	6825      	ldr	r5, [r4, #0]
 8009896:	1961      	adds	r1, r4, r5
 8009898:	428b      	cmp	r3, r1
 800989a:	bf01      	itttt	eq
 800989c:	6819      	ldreq	r1, [r3, #0]
 800989e:	685b      	ldreq	r3, [r3, #4]
 80098a0:	1949      	addeq	r1, r1, r5
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	e7ed      	b.n	8009882 <_free_r+0x22>
 80098a6:	461a      	mov	r2, r3
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	b10b      	cbz	r3, 80098b0 <_free_r+0x50>
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	d9fa      	bls.n	80098a6 <_free_r+0x46>
 80098b0:	6811      	ldr	r1, [r2, #0]
 80098b2:	1855      	adds	r5, r2, r1
 80098b4:	42a5      	cmp	r5, r4
 80098b6:	d10b      	bne.n	80098d0 <_free_r+0x70>
 80098b8:	6824      	ldr	r4, [r4, #0]
 80098ba:	4421      	add	r1, r4
 80098bc:	1854      	adds	r4, r2, r1
 80098be:	42a3      	cmp	r3, r4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	d1e0      	bne.n	8009886 <_free_r+0x26>
 80098c4:	681c      	ldr	r4, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	6053      	str	r3, [r2, #4]
 80098ca:	4421      	add	r1, r4
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	e7da      	b.n	8009886 <_free_r+0x26>
 80098d0:	d902      	bls.n	80098d8 <_free_r+0x78>
 80098d2:	230c      	movs	r3, #12
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	e7d6      	b.n	8009886 <_free_r+0x26>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf04      	itt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	bf04      	itt	eq
 80098e8:	1949      	addeq	r1, r1, r5
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	6054      	str	r4, [r2, #4]
 80098ee:	e7ca      	b.n	8009886 <_free_r+0x26>
 80098f0:	b003      	add	sp, #12
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	2000041c 	.word	0x2000041c

080098f8 <sbrk_aligned>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4e0e      	ldr	r6, [pc, #56]	; (8009934 <sbrk_aligned+0x3c>)
 80098fc:	460c      	mov	r4, r1
 80098fe:	6831      	ldr	r1, [r6, #0]
 8009900:	4605      	mov	r5, r0
 8009902:	b911      	cbnz	r1, 800990a <sbrk_aligned+0x12>
 8009904:	f000 f8bc 	bl	8009a80 <_sbrk_r>
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 f8b7 	bl	8009a80 <_sbrk_r>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d00a      	beq.n	800992c <sbrk_aligned+0x34>
 8009916:	1cc4      	adds	r4, r0, #3
 8009918:	f024 0403 	bic.w	r4, r4, #3
 800991c:	42a0      	cmp	r0, r4
 800991e:	d007      	beq.n	8009930 <sbrk_aligned+0x38>
 8009920:	1a21      	subs	r1, r4, r0
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f8ac 	bl	8009a80 <_sbrk_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d101      	bne.n	8009930 <sbrk_aligned+0x38>
 800992c:	f04f 34ff 	mov.w	r4, #4294967295
 8009930:	4620      	mov	r0, r4
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	20000420 	.word	0x20000420

08009938 <_malloc_r>:
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	1ccd      	adds	r5, r1, #3
 800993e:	f025 0503 	bic.w	r5, r5, #3
 8009942:	3508      	adds	r5, #8
 8009944:	2d0c      	cmp	r5, #12
 8009946:	bf38      	it	cc
 8009948:	250c      	movcc	r5, #12
 800994a:	2d00      	cmp	r5, #0
 800994c:	4607      	mov	r7, r0
 800994e:	db01      	blt.n	8009954 <_malloc_r+0x1c>
 8009950:	42a9      	cmp	r1, r5
 8009952:	d905      	bls.n	8009960 <_malloc_r+0x28>
 8009954:	230c      	movs	r3, #12
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	2600      	movs	r6, #0
 800995a:	4630      	mov	r0, r6
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	4e2e      	ldr	r6, [pc, #184]	; (8009a1c <_malloc_r+0xe4>)
 8009962:	f000 f89d 	bl	8009aa0 <__malloc_lock>
 8009966:	6833      	ldr	r3, [r6, #0]
 8009968:	461c      	mov	r4, r3
 800996a:	bb34      	cbnz	r4, 80099ba <_malloc_r+0x82>
 800996c:	4629      	mov	r1, r5
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff ffc2 	bl	80098f8 <sbrk_aligned>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	4604      	mov	r4, r0
 8009978:	d14d      	bne.n	8009a16 <_malloc_r+0xde>
 800997a:	6834      	ldr	r4, [r6, #0]
 800997c:	4626      	mov	r6, r4
 800997e:	2e00      	cmp	r6, #0
 8009980:	d140      	bne.n	8009a04 <_malloc_r+0xcc>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	4631      	mov	r1, r6
 8009986:	4638      	mov	r0, r7
 8009988:	eb04 0803 	add.w	r8, r4, r3
 800998c:	f000 f878 	bl	8009a80 <_sbrk_r>
 8009990:	4580      	cmp	r8, r0
 8009992:	d13a      	bne.n	8009a0a <_malloc_r+0xd2>
 8009994:	6821      	ldr	r1, [r4, #0]
 8009996:	3503      	adds	r5, #3
 8009998:	1a6d      	subs	r5, r5, r1
 800999a:	f025 0503 	bic.w	r5, r5, #3
 800999e:	3508      	adds	r5, #8
 80099a0:	2d0c      	cmp	r5, #12
 80099a2:	bf38      	it	cc
 80099a4:	250c      	movcc	r5, #12
 80099a6:	4629      	mov	r1, r5
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7ff ffa5 	bl	80098f8 <sbrk_aligned>
 80099ae:	3001      	adds	r0, #1
 80099b0:	d02b      	beq.n	8009a0a <_malloc_r+0xd2>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	442b      	add	r3, r5
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	e00e      	b.n	80099d8 <_malloc_r+0xa0>
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	1b52      	subs	r2, r2, r5
 80099be:	d41e      	bmi.n	80099fe <_malloc_r+0xc6>
 80099c0:	2a0b      	cmp	r2, #11
 80099c2:	d916      	bls.n	80099f2 <_malloc_r+0xba>
 80099c4:	1961      	adds	r1, r4, r5
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	6025      	str	r5, [r4, #0]
 80099ca:	bf18      	it	ne
 80099cc:	6059      	strne	r1, [r3, #4]
 80099ce:	6863      	ldr	r3, [r4, #4]
 80099d0:	bf08      	it	eq
 80099d2:	6031      	streq	r1, [r6, #0]
 80099d4:	5162      	str	r2, [r4, r5]
 80099d6:	604b      	str	r3, [r1, #4]
 80099d8:	4638      	mov	r0, r7
 80099da:	f104 060b 	add.w	r6, r4, #11
 80099de:	f000 f865 	bl	8009aac <__malloc_unlock>
 80099e2:	f026 0607 	bic.w	r6, r6, #7
 80099e6:	1d23      	adds	r3, r4, #4
 80099e8:	1af2      	subs	r2, r6, r3
 80099ea:	d0b6      	beq.n	800995a <_malloc_r+0x22>
 80099ec:	1b9b      	subs	r3, r3, r6
 80099ee:	50a3      	str	r3, [r4, r2]
 80099f0:	e7b3      	b.n	800995a <_malloc_r+0x22>
 80099f2:	6862      	ldr	r2, [r4, #4]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	bf0c      	ite	eq
 80099f8:	6032      	streq	r2, [r6, #0]
 80099fa:	605a      	strne	r2, [r3, #4]
 80099fc:	e7ec      	b.n	80099d8 <_malloc_r+0xa0>
 80099fe:	4623      	mov	r3, r4
 8009a00:	6864      	ldr	r4, [r4, #4]
 8009a02:	e7b2      	b.n	800996a <_malloc_r+0x32>
 8009a04:	4634      	mov	r4, r6
 8009a06:	6876      	ldr	r6, [r6, #4]
 8009a08:	e7b9      	b.n	800997e <_malloc_r+0x46>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	603b      	str	r3, [r7, #0]
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f000 f84c 	bl	8009aac <__malloc_unlock>
 8009a14:	e7a1      	b.n	800995a <_malloc_r+0x22>
 8009a16:	6025      	str	r5, [r4, #0]
 8009a18:	e7de      	b.n	80099d8 <_malloc_r+0xa0>
 8009a1a:	bf00      	nop
 8009a1c:	2000041c 	.word	0x2000041c

08009a20 <_realloc_r>:
 8009a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	4680      	mov	r8, r0
 8009a26:	4614      	mov	r4, r2
 8009a28:	460e      	mov	r6, r1
 8009a2a:	b921      	cbnz	r1, 8009a36 <_realloc_r+0x16>
 8009a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a30:	4611      	mov	r1, r2
 8009a32:	f7ff bf81 	b.w	8009938 <_malloc_r>
 8009a36:	b92a      	cbnz	r2, 8009a44 <_realloc_r+0x24>
 8009a38:	f7ff ff12 	bl	8009860 <_free_r>
 8009a3c:	4625      	mov	r5, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a44:	f000 f838 	bl	8009ab8 <_malloc_usable_size_r>
 8009a48:	4284      	cmp	r4, r0
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	d802      	bhi.n	8009a54 <_realloc_r+0x34>
 8009a4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a52:	d812      	bhi.n	8009a7a <_realloc_r+0x5a>
 8009a54:	4621      	mov	r1, r4
 8009a56:	4640      	mov	r0, r8
 8009a58:	f7ff ff6e 	bl	8009938 <_malloc_r>
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d0ed      	beq.n	8009a3e <_realloc_r+0x1e>
 8009a62:	42bc      	cmp	r4, r7
 8009a64:	4622      	mov	r2, r4
 8009a66:	4631      	mov	r1, r6
 8009a68:	bf28      	it	cs
 8009a6a:	463a      	movcs	r2, r7
 8009a6c:	f7ff fed0 	bl	8009810 <memcpy>
 8009a70:	4631      	mov	r1, r6
 8009a72:	4640      	mov	r0, r8
 8009a74:	f7ff fef4 	bl	8009860 <_free_r>
 8009a78:	e7e1      	b.n	8009a3e <_realloc_r+0x1e>
 8009a7a:	4635      	mov	r5, r6
 8009a7c:	e7df      	b.n	8009a3e <_realloc_r+0x1e>
	...

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f9 f930 	bl	8002cf0 <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000424 	.word	0x20000424

08009aa0 <__malloc_lock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__malloc_lock+0x8>)
 8009aa2:	f000 b811 	b.w	8009ac8 <__retarget_lock_acquire_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20000428 	.word	0x20000428

08009aac <__malloc_unlock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	; (8009ab4 <__malloc_unlock+0x8>)
 8009aae:	f000 b80c 	b.w	8009aca <__retarget_lock_release_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	20000428 	.word	0x20000428

08009ab8 <_malloc_usable_size_r>:
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f18      	subs	r0, r3, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfbc      	itt	lt
 8009ac2:	580b      	ldrlt	r3, [r1, r0]
 8009ac4:	18c0      	addlt	r0, r0, r3
 8009ac6:	4770      	bx	lr

08009ac8 <__retarget_lock_acquire_recursive>:
 8009ac8:	4770      	bx	lr

08009aca <__retarget_lock_release_recursive>:
 8009aca:	4770      	bx	lr

08009acc <_init>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr

08009ad8 <_fini>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr
